<?php
/*
	Title: CoAP library
	Author: Kobe Wright
	
*/


//////////////////////////////////////////////////////////////////////////////////////////
//																						//
//									SUPPORTED FUNCTIONS									//
//									-------------------									//
//																						//
//	- coap_library_generate_message_id()												//
//	- coap_library_generate_token($token_length)										//
//	- coap_library_generate_header_and_token($type, $method, $token_length)				//
//	- coap_library_add_option($message, $option_number, $value)							//
//	- coap_library_add_payload($message, $payload)										//
//	- coap_library_string_to_hex_with_padding($string)									//
//	- coap_library_string_to_hex_without_padding($string)								//
//	- coap_library_hex_to_string($hex)													//
//	- coap_library_generate_observe_get_request($uri_path)								//
//	- coap_library_generate_basic_get_request($uri_path)								//
//	- coap_library_get_option_value($message, $option_number)							//
//	- coap_library_get_max_age($message)												//
//	- coap_library_get_payload($message)												//
//	- coap_library_get_message_id_from_message($message)								//
//	- coap_library_generate_acknowledgement($message)									//
//	- coap_library_generate_reset($response)											//
//	- coap_library_hex_to_binary($hex)													//
//	- coap_library_get_bit_from_hex($hex, $bit_number)									//
//	- coap_library_send_get_request($ip, $resource)										//
//																						//
//////////////////////////////////////////////////////////////////////////////////////////

require_once('coap_library_classes.inc');


//////////////////////////////////////////////////////////////////////////////////////////
// Convert normal string to hexadecimal string, padding when nr of characters is uneven //
//////////////////////////////////////////////////////////////////////////////////////////
function coap_library_string_to_hex_with_padding($string){
    $hex='';
    for ($i=0; $i < strlen($string); $i++){
		$byte = dechex(ord($string[$i]));
		if(strlen($byte) == 1){
			$byte = "0" . $byte;
		}
        $hex .= $byte;
    }
    return $hex;
}


/////////////////////////////////////////////////////////////
// Convert normal string to hexadecimal string, no padding //
/////////////////////////////////////////////////////////////
function coap_library_string_to_hex_without_padding($string){
    $hex='';
    for ($i=0; $i < strlen($string); $i++){
		$byte = dechex(ord($string[$i]));
		$hex .= $byte;
    }
    return $hex;
}


/////////////////////////////////////////////////
// Convert hexadecimal string to normal string //
/////////////////////////////////////////////////
function coap_library_hex_to_string($hex){
    $string='';
    for ($i=0; $i < strlen($hex)-1; $i+=2)
    {
        $string .= chr(hexdec($hex[$i].$hex[$i+1]));
    }
    return $string;
}


///////////////////////////////////////////////////
// Convert hexadecimal message to binary message //
///////////////////////////////////////////////////
function coap_library_hex_to_binary($hex){
	$binary = pack("H*", $hex);
	return $binary;
}


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Get bit with given number from a given hexadecimal value, returns null if bit number or hexadecimal value is invalid //
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
function coap_library_get_bit_from_hex($hex, $bit_number){
	if($bit_number > 3 || $bit_number < 0 || strlen($hex) != 1){
		return null;
	}
	if($bit_number == 0){
		return (hexdec($hex) % 2);
	}
	else if($bit_number == 1){
		return (hexdec($hex) == 2 || hexdec($hex) == 3 || hexdec($hex) == 6 || hexdec($hex) == 7 || hexdec($hex) == 10 || hexdec($hex) == 11 || hexdec($hex) == 14 || hexdec($hex) == 15) ? 1 : 0;
	}
	else if($bit_number == 2){
		return ((hexdec($hex) > 3 && hexdec($hex) < 8) || (hexdec($hex) > 11 && hexdec($hex) < 16 )) ? 1 : 0;
	}
	else if($bit_number == 3){
		return (hexdec($hex) > 7) ? 1 : 0;
	}
	return null;
}

function coap_library_stop_observing($module, $uri){
	$num_deleted = db_delete('coap_library_observe_resources')
		->condition('uri', $uri, '=')
		->condition('module', $module, '=')
		->execute();
}

function coap_library_generate_acknowledgement($response){
	$hex = "60";
	$hex .= "00";
	$hex .= coap_library_get_message_id_from_message($response);
	return $hex;
}

function coap_library_generate_reset($response){
	$hex = "70";
	$hex .= "00";
	$hex .= coap_library_get_message_id_from_message($response);
	return $hex;
}

function coap_library_get_message_id_from_message($response){
	$message_id = substr($response, 4, 4);
	return $message_id;
}