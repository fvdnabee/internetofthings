<?php

/**
 * Implements hook_menu().
 * CreÃ«ert het pad waarnaar jQuery een ajax call kan uitvoeren en de callback-functie
 */
function temperatuursensor_met_coap_library_menu() {
  $items = array();
  $items["temperatuursensor/poll"] = array(
    "title" => "Get last entry",
    "page callback" => "temperatuur_met_coap_library_page_callback",
    "access callback" => true,
    "type" => MENU_CALLBACK
  );
  return $items;
}

///////////
// BLOCK //
///////////

/**
 * Implements hook_block_info().
 * Geeft informatie over de block die de module aanbiedt
 */
function temperatuursensor_met_coap_library_block_info() {
	$blocks['user_custom'] = array(
		'info' => t('Blok met mogelijkheid tot opvragen temperatuur en observeren van verloop van temperatuur'),
	);
	return $blocks;
}

/**
 * Implements hook_block_info().
 * Definieert de titel en inhoud van de block
 */
function temperatuursensor_met_coap_library_block_view($delta='') {
	global $user;
	
	$block = null;
	$block['subject'] = 'Temperatuursensoren bevragen met het CoAP protocol';
	$block_content = null;
	
	// URI form
	$temp = drupal_get_form('uri_form');
	$block_content .= drupal_render($temp);
	
	// Observe form
	$temp = drupal_get_form('observe_form');
	$block_content .= drupal_render($temp);
	
	$block_content .= "<img style = 'visibility:hidden;' src = '' id = 'errorimg' /><label id='error' ></label>"; // elementen om fouten te tonen
	
	// Te bekijken URI ophalen
	$query = db_select('CoAP_users', 'users');
	$query
		->fields('users', array('uid', 'uri', 'watch'))
		->condition('uid', $user->uid, '=')
		->condition('watch', 1, '=');
	$result = $query->execute();
	$empty = TRUE;
	foreach($result as $record){
		$empty = FALSE;
		$uri = $record->uri;
	}
	
	if(!$empty){
		// Tabel met geschiedenis van opvragingen(5 laatste)
		$query = db_select('CoAP_values', 'coap_values');
		$query
			->fields('coap_values', array('hid', 'value', 'max_age', 'timestamp', 'uri', 'uid'))
			->condition('uri', $uri, '=')
			->condition('uid', $user->uid, '=')
			->orderBy('hid', 'DESC')
			->range(0,5);
		$result = $query->execute();
		$block_content .= "<table id='historytable' ><tr><th>Hid</th><th>Value</th><th>Max age</th><th>Timestamp</th></tr>";
		$nr = 1;
		foreach ($result as $record){ // voegt telkens een rij toe aan de tabel, waarbij de elementen een id met een rij-nr erna krijgen
			$value = $record->value;
			$hid = $record->hid;
			$max_age = $record->max_age;
			$timestamp = $record->timestamp;
			$block_content .= "<tr><td id='hid" . $nr . "' >" . $hid . "</td><td id='temperatuur" . $nr . "' >" . $value . "</td><td id='max_age" . $nr . "' >" . $max_age . "</td><td id='timestamp" . $nr . "' >" . $timestamp . "</td></tr>";
			$nr++;
		}
		while($nr <= 5){ // voegt telkens een rij toe aan de tabel, waarbij de elementen een id met een rij-nr erna krijgen
			$block_content .= "<tr><td id='hid" . $nr . "' >/</td><td id='temperatuur" . $nr . "' > </td><td id='max_age" . $nr . "' > </td><td id='timestamp" . $nr . "' > </td></tr>";
			$nr++;
		}
		$block_content .= "</table>";
		
		$block_content .= "<div id = 'grafiek' ></div>"; // Grafiek
	}
	
	// Bekijken form
	$temp = drupal_get_form('bekijken_form');
	$block_content .= drupal_render($temp);
	
	// GET form
	$block_content .= "<label id = 'get_response' >Response: </label>";
	$temp = drupal_get_form('get_request_form');
	$block_content .= drupal_render($temp);
	
	$block['content'] = $block_content;
	drupal_add_js('https://www.google.com/jsapi'); // JavaScript bestand toevoegen
	drupal_add_js(drupal_get_path('module', 'temperatuursensor_met_coap_library') . '/js/temperatuursensor_met_coap_library.js'); // JavaScript bestand toevoegen
	return $block;
}

//////////////////
// BEKIJKEN FORM //
//////////////////

/**
 * Implements hook_form().
 * Voegt componenten toe aan de form
 */
function bekijken_form($form_in, &$form_state) {
	// Titel van form
	$form['title'] = array (
		'#value' => t('Observe'),
	);
	
	global $user;
	$query = db_select('CoAP_users', 'users');
	$query
		->fields('users', array('uid', 'uri', 'watch'))
		->condition('uid', $user->uid,'=');
	$result = $query->execute();
	
	// Radio buttons om URI te selecteren
	if($result->rowCount() > 0){
		$options = array();
		foreach ($result as $record){
			$options[$record->uri] = $record->uri;
			if($record->watch == 1){
				$uri = $record->uri;
			}
		}
		$form['bekijken']['uri'] = array(
			'#type' => 'radios',
			'#title' => t('Selecteer een resource'),
			'#default_value' => $uri, // Default value moet geselecteerde URI worden
			'#options' => $options,
		);
	}
	
	// Submit-knop
	$form['bekijken']['submit'] = array (
		'#type' => 'submit',
		'#value' => t("Bekijken"),
		);
		
	$form['#action'] = '';
	return $form;
}

/**
 * Implements hook_form_submit().
 * functie die wordt uitgevoerd als het formulier ingediend wordt
 */
function bekijken_form_submit($form, $form_state) {
	global $user;
	
	// Variabele 'bekijken' van elk URI voor de user in de databank op 0 zetten
	$num_updated = db_update('CoAP_users')
		->fields(array(
			'watch' => 0,
		))
		->condition('uid', $user->uid, '=')
		->execute();
	
	// Als observen opgestart wordt, variabele 'bekijken' op 1 zetten voor de gekozen URI
	$num_updated = db_update('CoAP_users')
		->fields(array(
			'watch' => 1,
		))
		->condition('uid', $user->uid, '=')
		->condition('uri', $form_state['values']['uri'], '=')
		->execute();
}

//////////////////////
// GET REQUEST FORM //
//////////////////////

/**
 * Implements hook_form().
 * Voegt componenten toe aan de form
 */
function get_request_form($form_in, &$form_state) {
	// Titel van form
	$form['title'] = array (
		'#value' => t('GET Request'),
	);
	
	// Submit-knop
	$form['wx_info']['temperatuur_udp_url_submit'] = array (
		'#type' => 'submit',
		'#value' => t('GET'),
		);
		
	$form['#action'] = '';
	return $form;
}

/**
 * Implements hook_form_submit().
 * functie die wordt uitgevoerd als het formulier ingediend wordt
 */
function get_request_form_submit($form, $form_state) {
	$handle = background_process_start('start_get_request', '2001:6a8:1d80:200::2', 'test');
}

//////////////
// URI FORM //
//////////////

/**
 * Implements hook_form().
 * Voegt componenten toe aan de form
 */
function uri_form($form_in, &$form_state) {
	// Titel van form
	$form['title'] = array (
		'#value' => t('URI form'),
	);
	
	// Eventuele fout
	$form['uri']['error'] = array(
		'#type' => 'item',
		'#markup' => variable_get('bad_uri', ''),
	);
	variable_del('bad_uri');
	
	// Invoer textbox voor URI
	$form['uri']['invoer'] = array(
		'#type' => 'textfield',
		'#title' => 'Geef een URI',
		'#default_value' => '',
	);
	
	// Submit-knop
	$form['uri']['submit'] = array (
		'#type' => 'submit',
		'#value' => t('Invoeren'),
	);
		
	$form['#action'] = '';
	
	return $form;
}

/**
 * Implements hook_form_submit().
 * functie die wordt uitgevoerd als het formulier ingediend wordt
 */
function uri_form_submit($form, $form_state) {
	global $user;
	
	$pattern = '/([^\/]+)\/(.*)/i';
	if(preg_match($pattern, $form_state['values']['invoer'], $matches)){
		$query = db_select('CoAP_resources', 'resources');
		$query
			->fields('resources', array('uri'))
			->condition('uri', $form_state['values']['invoer'], '=');
		$result = $query->execute();
		
		if($result->rowCount() == 0){
			$id = db_insert('CoAP_resources')
				->fields(array(
					'uri' => $form_state['values']['invoer'],
					'observable' => 1,
					'last_error' => 'none',
				))
				->execute();
		}
		
		// Watch bij alle rijen van de user op nul zetten
		$num_updated = db_update('CoAP_users')
			->fields(array(
				'watch' => 0,
			))
			->condition('uid', $user->uid, '=')
			->execute();
		
		// Watch van net toegevoegde URI op 1 zetten
		$id = db_insert('CoAP_users')
			->fields(array(
				'uid' => $user->uid,
				'uri' => $form_state['values']['invoer'],
				'observe' => 0,
				'watch' => 1,
			))
			->execute();
	}
	else{
		variable_set('bad_uri', 'Er werd een ongeldige URI opgegeven.');
	}
}

//////////////////////
// OBSERVE FORM //
//////////////////////

/**
 * Implements hook_form().
 * Voegt componenten toe aan de form
 */
function observe_form($form_in, &$form_state) {
	// Titel van form
	$form['title'] = array (
		'#value' => t('Observe form'),
	);
	
	global $user;
	
	// Checkbox per observable resource
	$query = db_select('CoAP_users', 'users');
	$query
		->fields('users', array('uid', 'uri', 'observe'))
		->condition('uid', $user->uid,'=');
	$result = $query->execute();
	foreach ($result as $record){
		$form['observe'][$record->uri] = array(
			'#type' => 'checkbox',
			'#title' => $record->uri,
			'#default_value' => $record->observe,
		);
	}
	
	// Submit-knop
	$form['observe']['temperatuur_udp_url_submit'] = array (
		'#type' => 'submit',
		'#value' => t('Observe'),
		);
		
	$form['#action'] = '';
	return $form;
}

/**
 * Implements hook_form_submit().
 * functie die wordt uitgevoerd als het formulier ingediend wordt
 */
function observe_form_submit($form, $form_state) {
	global $user;
	
	$query = db_select('CoAP_users', 'users');
	$query
		->fields('users', array('uid', 'uri'))
		->condition('uid', $user->uid, '=');
	$result = $query->execute();
	foreach ($result as $record){
		$observe_query = db_select('CoAP_users', 'users');
		$observe_query
			->fields('users', array('uid', 'uri', 'observe'))
			->condition('uri', $record->uri, '=')
			->condition('observe', 1, '=');
		$observe_result = $observe_query->execute();
	
		if($form_state['values'][$record->uri] != 0 && $observe_result->rowCount() == 0){
			background_process_start('start_observing', $record->uri);
		}
		$num_updated = db_update('CoAP_users')
			->fields(array(
				'observe' => $form_state['values'][$record->uri],
			))
			->condition('uri', $record->uri, '=')
			->condition('uid', $user->uid, '=')
			->execute();
	}
}


//////////////////////
// PRIVATE FUNCTIES //
//////////////////////

// Functie die wordt uitgevoerd als een ajax call wordt uitgevoerd naar /temperatuursensor/poll, geeft de laatste entry terug
function temperatuur_met_coap_library_page_callback(){
	global $user;
	variable_set('test', "opgeroepen");
	
	// bekeken URI bepalen
	$query = db_select('CoAP_users', 'users');
	$query
		->fields('users', array('uid', 'uri', 'watch'))
		->condition('uid', $user->uid, '=')
		->condition('watch', 1, '=')
		->range(0,1);
	$result = $query->execute();
	$uri = '';
	foreach($result as $record){
		$uri = $record->uri;
	}
	
	// Laatste opvraging ophalen
	$query = db_select('CoAP_values', 'coap_values');
	$query
		->fields('coap_values', array('hid', 'uid', 'timestamp', 'max_age', 'value', 'uri'))
		->condition('uri', $uri, '=')
		->condition('uid', $user->uid, '=')
		->orderBy('hid', 'DESC')
		->range(0,1);
	$result = $query->execute();
	
	// print een rij uit in tabelformaat zodat jQuery die kan gebruiken om in de tabel te stoppen
	foreach ($result as $record){
		$resources_query = db_select('CoAP_resources', 'resources');
		$resources_query
			->fields('resources', array('uri', 'last_error'))
			->condition('uri', $record->uri, '=');
		$resources_result = $resources_query->execute();
		
		foreach($resources_result as $resources_record){
			$output = "<error>" . $resources_record->last_error . "</error><responded>" . variable_get('responded', 'no') . "</responded><get_response>" . variable_get('get_response', '') . "</get_response>";
			$hid = $record->hid;
			$timestamp = $record->timestamp;
			$temperatuur = $record->value;
			$max_age = $record->max_age;
			$output .= "<tr><td>" . $hid . "</td><td>" . $temperatuur . "</td><td>" . $max_age . "</td><td>" . $timestamp . "</td></tr>";
		}
	}
	variable_set('responded', 'no');
	if(!isset($output)){
		$query = db_select('CoAP_resources', 'resources');
		$query
			->fields('resources', array('uri', 'last_error'))
			->condition('uri', $uri, '=');
		$result = $query->execute();
		
		if($result->rowCount() > 0){
			foreach($result as $record){
				$output = "<error>" . $record->last_error . "</error>";
			}
		}
		else{
			$output = "no values";
		}
	}
	print $output;
}

function start_observing($uri){
	global $user;
	$error = FALSE;
	
	$pattern = '/([^\/]+)\/(.*)/i';
	if(preg_match($pattern, $uri, $matches)){
		$ip = $matches[1];
		$resource = $matches[2];
		$port = 5683;
		
		$num_observers = get_number_of_observers($ip, $resource);
		
		$socket = pfsockopen("udp://[" . $ip . "]", $port, $errno, $errstr); // udp-socket openen
		if (!$socket) {
			insert_error_into_database("unreachable", $ip, $resource, $error);
		} else { 
			insert_error_into_database("none", $ip, $resource, $error);
			
			stream_set_timeout($socket, 5, 0);
			$retries = 0;
			$response = 'empty';
			$message = coap_library_generate_observe_get_request($resource);
			$message = pack('H*', $message);
			$returnvalue = fwrite($socket, $message); // wegschrijven naar udp-socket
			if($returnvalue != FALSE){
				$response = fread($socket, 128); // lezen van udp-socket
			}
			while($retries < 5 && ($response == '' || $response == 'empty')){
				insert_error_into_database("delay", $ip, $resource, $error);
				
				$message = coap_library_generate_observe_get_request($resource);
				$message = pack('H*', $message);
				$returnvalue = fwrite($socket, $message); // wegschrijven naar udp-socket
				if($returnvalue != FALSE){
					$response = fread($socket, 128); // lezen van udp-socket
				}
				$retries++;
			}
			
			$num_observers = get_number_of_observers($ip, $resource);
			
			if($response != '' && $response != 'empty'){
				insert_error_into_database("none", $ip, $resource, $error);
				stream_set_timeout($socket, intval(coap_library_get_max_age(coap_library_string_to_hex_with_padding($response))), 0);
				while($num_observers > 0 && $response != '' && $response != 'empty'){
					$response_hex = coap_library_string_to_hex_with_padding($response);
					insert_error_into_database("none", $ip, $resource, $error);
					insert_response_into_database($response_hex, $ip, $resource);
					$ack = coap_library_generate_acknowledgement($response_hex);
					$ack = pack('H*', $ack);
					$returnvalue = fwrite($socket, $ack); // Acknowledgement wegschrijven naar udp-socket
					$retries = 0;
					$response = 'empty';
					$response = fread($socket, 128); // lezen van udp-socket
					while($retries < 3 && ($response == '' || $response == 'empty')){
						insert_error_into_database("delay", $ip, $resource, $error);
						
						$message = coap_library_generate_observe_get_request($resource);
						$message = pack('H*', $message);
						$returnvalue = fwrite($socket, $message); // wegschrijven naar udp-socket
						if($returnvalue != FALSE){
							$response = fread($socket, 128); // lezen van udp-socket
						}
						$retries++;
					}
					
					$num_observers = get_number_of_observers($ip, $resource);
				}
			}
			else{
				insert_error_into_database("broken", $ip, $resource, $error);
			}
			if($num_observers > 0){
				stop_observers($ip, $resource);
				insert_error_into_database("broken", $ip, $resource, $error);
			}
			else{
				$reset = coap_library_generate_reset(coap_library_string_to_hex_with_padding($response));
				$reset = pack('H*', $reset);
				$returnvalue = fwrite($socket, $reset); // wegschrijven naar udp-socket
			}
			fclose($socket);
		}
		if($num_observers == 0){
			insert_error_into_database("none", $ip, $resource, $error);
		}
		if($error){
			stop_observers($ip, $resource);
		}
	}
	else{
		insert_error_into_database("bad uri", $ip, $resource);
		stop_observers($ip, $resource);
	}
}

function insert_error_into_database($error_string, $ip, $resource, &$error){
	if($error_string == 'none'){
		$error = FALSE;
	}
	else{
		$error = TRUE;
	}
	$num_updated = db_update('CoAP_resources')
			->fields(array(
				'last_error' => $error_string,
			))
			->condition('uri', $ip . "/" . $resource, '=')
			->execute();
}

function stop_observers($ip, $resource){
	$num_updated = db_update('CoAP_users')
			->fields(array(
				'observe' => 0,
			))
			->condition('uri', $ip . "/" . $resource, '=')
			->execute();
}

function get_number_of_observers($ip, $resource){
	$query = db_select('CoAP_users', 'users');
	$query
		->fields('users', array('uri', 'observe'))
		->condition('uri', $ip . "/" . $resource, '=')
		->condition('observe', 1, '=');
	$result = $query->execute();
	return $result->rowCount();
}

//
function start_get_request($ip, $resource){
	$response = coap_library_send_get_request($ip, $resource);
	if($response != null){
		variable_set('responded', 'yes');
		variable_set('get_response', $response);
	}
	else{
		variable_set('responded', 'yes');
		variable_set('get_response', 'no response returned');
	}
}

// Response verwerken en naar databank schrijven
function insert_response_into_database($response, $ip, $resource){
	$max_age = intval(coap_library_get_max_age($response));
	$temperature = (double) get_temperature($response);
	
	$query = db_select('CoAP_users', 'users');
	$query
		->fields('users', array('uri', 'uid', 'observe'))
		->condition('uri', $ip . '/' . $resource, '=')
		->condition('observe', 1, '=');
	$result = $query->execute();
	
	foreach($result as $record){
		$hid = db_insert('CoAP_values')
			->fields(array(
				'original_response' => $response,
				'value' => $temperature,
				'max_age' => $max_age,
				'uri' => $ip . '/' . $resource,
				'uid' => $record->uid,
			))
			->execute();
	}
}

// Haalt de temperatuur uit de payload van een response
function get_temperature($response){
	$poss_temperature = coap_library_get_payload($response);
	if($poss_temperature == null){
		return 'temperatuur niet gevonden';
	}
	else{
		$pattern = '/value\s+(.*)C/i';
		if(preg_match($pattern, $poss_temperature, $matches)){
			$temperature = $matches[1];
			return $temperature;
		}
		else{
			return 'temperatuur niet gevonden';
		}
	}
}