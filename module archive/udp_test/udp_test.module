<?php

///////////
// BLOCK //
///////////

/**
 * Implements hook_block_info().
 * Geeft informatie over de block die de module aanbiedt
 */
function udp_test_block_info() {
	$blocks['user_custom'] = array(
		'info' => t('Blok om UDP-sockets te testen'),
	);
	return $blocks;
}

/**
 * Implements hook_block_info().
 * Definieert de titel en inhoud van de block
 */
function udp_test_block_view($delta='') {
	$block = null;
	$block['subject'] = 'UDP sockets';
	$block_content = null;
	$block_content .= get_value_from_socket();
	$block['content'] = $block_content;
	return $block;
}

/////////////
// PRIVATE //
/////////////

// Opent udp-socket, stuurt een CoAP GET request en geeft de response terug
function get_value_from_socket(){
	$response = '';
	$fp = fsockopen("udp://[2001:6a8:1d80:200::2]", 5683, $errno, $errstr); // udp-socket openen
	if (!$fp) {
		echo "$errstr ($errno)<br />\n";
	} else {
		$out = "40"; // Version(01) + type(00 voor Confirmable) + Token Length(0000) --> 01000000 --> 40
		$out .= "01"; // Code (00000001 voor GET) --> 00000001 --> 01
		$out .= generate_message_id(); // Message id --> 2 bytes --> 4 hexadecimalen
		$out .= "60"; // Option Delta (1011 voor Path-URI) + Option Length (0100 bytes voor 'test') --> 10110100 --> b4
		$out .= "53";
		$out .= "6f6273"; // Option value = 'test' --> 74657374
		// $out .= "13"; // Option Delta (1011 voor Path-URI) + Option Length (0100 bytes voor 'test') --> 10110100 --> b4
		// $out .= "6f6273"; // Option value = 'test' --> 74657374
		$binary = pack("H*", $out); // hexadecimaal omzetten naar binair
		$returnvalue = fwrite($fp, $binary); // wegschrijven naar udp-socket
		if($returnvalue != FALSE){
			$response = fread($fp, 128); // lezen van udp-socket
		}
		else{
			echo "kon niet naar socket schrijven";
		}
		fclose($fp);
	}
	return $response;
}

// Message id genereren dat nog niet gebruikt werd door telkens te incrementeren
function generate_message_id(){
	$message_id = variable_get('current_message_id', null);
	if(!isset($message_id)){
		$message_id = rand(0, 65535);
	}
	else{
		$message_id++;
		$message_id % 65536;
	}
	variable_set('current_message_id', $message_id);
	$message_id = dechex($message_id);
	$message_id_string = strval($message_id);
	$message_id_string = str_pad($message_id_string, 4, "0", STR_PAD_LEFT);
	return $message_id_string;
}