<?php

/**
 * Implements hook_install().
 * We use it to install the fields used by the content types and define the instances of the fields used by our content types.
 */
function coap_sensor_install(){
	// create a simple content type
	// node_types_rebuild();
	// $types = node_type_get_types();
	
	// create all the fields we are adding to our content type
	foreach (_coap_sensor_installed_fields() as $field) {
		field_create_field($field);
	}
	
	// create all the instance for our fields
	foreach (_coap_sensor_installed_instances() as $instance) {
		field_create_instance($instance);
	}
}

function _coap_sensor_installed_fields(){
	$fields['field_device_uri'] = array(
		'field_name' => 'field_device_uri',
		'label' => t('Device URI'),
		'cardinality' => 1,
		'type' => 'text',
	);  
	
	$fields['field_resource_uri'] = array(
		'field_name' => 'field_resource_uri',
		'label' => t('Resource URI'),
		'cardinality' => 1,
		'type' => 'text',
	);
	
	$fields['field_resource_references'] = array(
		'field_name' => 'field_resource_references',
		'label' => 'Resource References',
		'cardinality' => '-1',
		'type' => 'node_reference',
		'settings' => array(
			'referenceable_types' => array(
				'coap_resource' => 'coap_resource'
			),
		),
	);  
	
	return $fields;
}

function _coap_sensor_installed_instances(){
	$instances['field_device_uri'] = array(
		'field_name' => 'field_device_uri',
		'entity_type' => 'node',
		'required' => TRUE,
		'bundle' => 'coap_device',
		'type' => 'text',
		'label' => t('Device URI') ,    
		'description' => 'Enter URI',
	);
	
	$instances['field_resource_uri'] = array(
		'field_name' => 'field_resource_uri',
		'entity_type' => 'node',
		'required' => TRUE,
		'bundle' => 'coap_resource',
		'type' => 'text',
		'label' => t('Resource URI') ,    
		'description' => 'Enter URI',
	);
	
	$instances['field_resource_references'] = array(
		'field_name' => 'field_resource_references',
		'entity_type' => 'node',		
		'bundle' => 'coap_device',
		'type' => 'node_reference',
		'label' => 'Resources',
		'widget' => array(
			'type' => 'node_reference_autocomplete'
		),
	); 
	
	return $instances;
}

/**
 * Implements hook_schema().
 * Defines the tables that have to be installed.
 */
function coap_sensor_schema() {
	$schema['coap_sensor_resource'] = array(
		'description' => "Holds resources and their characteristics",
		'fields' => array(
				'uri' => array(
					'type' => 'varchar',
					'not null' => TRUE,
					'length' => '128',
					'description' => 'URI from a resource',
				),
				'obs' => array(					
					'type' => 'int',
					'unsigned' => TRUE,
					'not null' => TRUE,
					'default' => 0,
					'description' => 'Value that indicates if a resource is observable. => 0 = not observable, 1 = observable',
				),
				'rt' => array(
					'type' => 'varchar',
					'not null' => FALSE,
					'length' => '128',
					'description' => 'application-specific semantic type',
				),
				'ct' => array(
					'type' => 'varchar',
					'not null' => FALSE,
					'length' => '128',
					'description' => 'content-format',
				),
				'ifd' => array(
					'type' => 'varchar',
					'not null' => FALSE,
					'length' => '128',
					'description' => 'interface desciption',
				),
				'sz' => array(
					'type' => 'varchar',
					'not null' => FALSE,
					'length' => '128',
					'description' => 'maximum size',
				),
				'title' => array(
					'type' => 'varchar',
					'not null' => FALSE,
					'length' => '128',
					'description' => 'human-readable name of resource',
				),
				'anchor' => array(
					'type' => 'varchar',
					'not null' => FALSE,
					'length' => '128',
					'description' => 'anchoring into other resource',
				),
				'rel' => array(
					'type' => 'varchar',
					'not null' => FALSE,
					'length' => '128',
					'description' => 'relation between source entered in anchor',
				),
				'last_error' => array(
					'description' => 'Laatst opgetreden fout',
					'type' => 'varchar',
					'not null' => TRUE,
					'default' => 'none',
					'length' => '128',
				),
				'created' => array(
					'description' => 'The Unix timestamp when the coap_sensor_resource was created.',
					'type' => 'int',
					'not null' => TRUE,
					'default' => 0,
				),
				'changed' => array(
					'description' => 'The Unix timestamp when the coap_sensor_resource was most recently saved.',
					'type' => 'int',
					'not null' => TRUE,
					'default' => 0,
				),
				'not_in_core' => array(
					'description' => 'Value indicating if this resource is no longer in the core.',
					'type' => 'int',
					'not null' => TRUE,
					'default' => 0,
				),
				
			),
			'primary key' => array('uri'),
	);
	
	// Tabel om URI's per user bij te houden
	$schema['coap_sensor_interested_user'] = array(
		'description' => "Holds which users are interested in which URI's.",
		'fields' => array(
				'uid' => array(
					'type' => 'int',
					'unsigned' => TRUE,
					'not null' => TRUE,
					'description' => 'User ID',
				),
				'uri' => array(
					'type' => 'varchar',
					'not null' => TRUE,
					'length' => '128',
					'description' => 'URI from a resource or device',
				),
				'nid' => array(
					'description' => 'nid of the node where the resource or device should be displayed',
					'type' => 'int',
					'unsigned' => TRUE,
					'not null' => TRUE,
				),
				'device' => array(
					'description' => 'Waarde om te bepalen of het om een resource of een device gaat --> 0 = resource, 1 = device',
					'type' => 'int',
					'unsigned' => TRUE,
					'not null' => TRUE,
					'default' => 0,
				),
				'observe' => array(
					'description' => 'Waarde om te bepalen of de gebruiker het device wil observeren of niet --> 0 = niet observeren, 1 = wel observeren',
					'type' => 'int',
					'unsigned' => TRUE,
					'not null' => TRUE,
					'default' => 0,
				),
				'polling_interval' => array(
					'description' => 'Waarde die het aantal seconden weergeeft tussen 2 opvragingen vanuit jQuery',
					'type' => 'int',
					'unsigned' => TRUE,
					'not null' => TRUE,
					'default' => 3,
				),
				'new' => array(
					'description' => 'value indicating if discovery values are in',
					'type' => 'int',
					'unsigned' => TRUE,
					'not null' => TRUE,
					'default' => 0,
				),
			),
			'primary key' => array('uid', 'uri', 'nid'),
			'foreign keys' => array(
				'uri' => array(
					'table' => 'coap_sensor_resource',
					'columns' => array('uri' => 'uri'),
				),
			),
	);

	// Table to store the fetched values
	$schema['coap_sensor_value'] = array(
		'description' => 'Tabel om geschiedenis van opgevraagde waarden op te slaan',
		'fields' => array(
				'hid' => array(
					'type' => 'serial',
					'unsigned' => TRUE,
					'not null' => TRUE,
					'description' => 'Primary key, unique history entry ID',
				),
				'uid' => array(
					'type' => 'int',
					'unsigned' => TRUE,
					'not null' => TRUE,
					'description' => 'User ID',
				),
				'uri' => array(
					'type' => 'varchar',
					'not null' => TRUE,
					'length' => '128',
					'description' => 'Een URI van een embedded device',
				),
				'content_format'=> array(
					'type' => 'varchar',
					'not null' => FALSE,
					'length' => '256',
					'description' => 'Het content-format van de response',
				),
				'payload'=> array(
					'type' => 'varchar',
					'not null' => FALSE,
					'length' => '2048',
					'description' => 'De inhoud van de payload',
				),
				'parsed_value' => array(
					'description' => 'Opgevraagde waarde',
					'type' => 'varchar',
					'length' => '128',
					'description' => 'Value that has been parsed out of the payload of the response, is original response if no value could be parsed',
					'not null' => FALSE,
				),
				'max_age' => array(
					'description' => 'Geldigheidsperiode in seconden',
					'type' => 'int',
					'unsigned' => TRUE,
					'not null' => FALSE,
				),
				'timestamp' => array(
					'description' => 'Tijd van opvraging',
					'mysql_type' => 'timestamp',
					'not null' => TRUE,
				),
				'original_response' => array(
					'type' => 'varchar',
					'not null' => TRUE,
					'length' => '2048',
					'default' => 'empty',
					'description' => 'De originele response van de aanvraag',
				),
				'new' => array(
					'type' => 'int',
					'not null' => TRUE,
					'default' => 1,
					'unsigned' => TRUE,
					'description' => 'Value indicating if the value is new. 0=no, 1=disicovery in progress, 2=values in db ',
				),
			),
			'primary key' => array('hid'),
			'foreign keys' => array(
				'uri' => array(
					'table' => 'coap_sensor_resource',
					'columns' => array('uri' => 'uri'),
				),
				'uid' => array(
					'table' => 'coap_sensor_interested_user',
					'columns' => array('uid' => 'uid'),
				),
			),
	);

	return $schema;
}

/**
 * Implements hook_uninstall().
 * Drops tables when the module is uninstalled.
 */
function coap_sensor_uninstall(){
	db_drop_table('coap_sensor_resource');
	db_drop_table('coap_sensor_interested_user');
	db_drop_table('coap_sensor_value');
	
	$content_types = array('coap_resource', 'coap_device');
	foreach($content_types as $content_type){
		$result = db_select('node','nodes')
					->fields('nodes', array('nid','type'))
					->condition('type', $content_type, '=')
					->execute();
					
		$nids = array();
		foreach ($result as $row) {
			$nids[] = $row->nid;
		}
		// Delete all the nodes at once
		node_delete_multiple($nids);
		
		// delete any variables made by module
		variable_del("comment_$content_type");
		variable_del("node_preview_$content_type");
		variable_del("node_submitted_$content_type");
		variable_del("node_options_$content_type");	
		
		// remove comment instances
		$instance = array(	'field_name'	=> 'comment_body',
							'bundle' 		=> "comment_node_$content_type",
							'entity_type' 	=> 'comment'
		);
		field_delete_instance($instance);
		
		// remove body instances (This is only necessary when you content type has a body)
		// $instance = array(	'field_name'	=> 'body',
							// 'bundle' 		=> $content_type,
							// 'entity_type' 	=> 'node'
		// );
		// field_delete_instance($instance);
		
		// deleting content type
		node_type_delete($content_type);
		node_types_rebuild();
		
		// Purge all field information
		field_purge_batch(1000);
	}
}

/**
 * Implements hook_enable().
 * Sets values in the variable table that have an effect on the content types.
 */
function coap_sensor_enable() {
	$content_types = array('coap_resource', 'coap_device');
	foreach($content_types as $content_type){
		variable_set("comment_$content_type", 0);						//comments default disabled
		variable_set("node_options_$content_type", array('status'));	//promote to front page default unchecked
		variable_set("node_preview_$content_type", 0);					//preview default disabled
		variable_set("node_submitted_$content_type", 1);				//shows author information
	}
	
	//	Alter the values table so the timestamp will not be updated when updating a value
	db_query('
		ALTER TABLE {coap_sensor_value} 
		MODIFY timestamp TIMESTAMP NOT NULL 
		DEFAULT CURRENT_TIMESTAMP'
	);
}

/**
 * Implements hook_disable().
 * Removes any trace of the module except for the tables in the database.
 */
function coap_sensor_disable(){
	
}