<?php

function custom_ct3_node_info() {
	return array(
		'custom_ct3' => array(
			'name' => t('custom_content_type'),
			'base' => 'custom_ct3',
			'description' => t('A custom content type.'),
			'has_title' => TRUE,
			'title_label' => t('custom_ct3 Title'),
			'locked' => FALSE,
		  	  
			/**
			 *  Submission form settings (core functional)
			 *  ------------------------------------------
			 *
			 *  Preview before submitting
			 *    node_preview_{$type}
			 *    value <int>:
			 *      0 => Disabled
			 *      1 => Optional
			 *      2 => Required
			 */
			'node-preview' => 0,

			 /**
			 *  Publishing options (core functional)
			 *  ------------------------------------
			 *
			 *  Default options
			 *    node_options_{$type}
			 *    value <array>:
			 *      array('status', 'promote', 'sticky', 'revision')
			 */
			'node-options' => array('status'),

			 /**
			 *  Display settings
			 *  ----------------
			 *
			 *  Display author and date information
			 *    node_submitted_{$type}
			 *    value <int>:
			 *      0 => Hide author and date information
			 *      1 => Display author and date information
			 */
			'node-submitted' => 0,

			 /**
			 *  Comment settings
			 *  ----------------
			 */
			'comment' => array(
			 /**
			 *  Default comment setting for new content
			 *    comment_{$type}
			 *    values <int>:
			 *      0 => hidden
			 *      1 => closed
			 *      2 => open
			 */
			'status' => 0,
			
			/**
			 *  Threading
			 *    comment_default_mode_{$type}
			 *    values <int>:
			 *      0 => don't show
			 *      1 => show
			 */
			//'default-mode' => 1,

			/**
			 *  Allow anonimous to leave commentns
			 *       comment_anonymous_{$type}
			 *    values <int>:
			 *      0 => forbid
			 *      1 => allow
			 */
			//'anonymous' => 0,

			/**
			 *  Comments per page
			 *    comment_default_per_page_{$type}
			 *    values <int>:
			 *      10, 30, 50, 70, 90, 150, 200, 250, 300
			 */
			//'default-per-page' => 50,

			/**
			 *  Show reply form on the same page as comments
			 *    comment_form_location_{$type}
			 *    values:
			 *      0 => hide
			 *      1 => show
			 */
			//'form-location' => 0,

			/**
			 *  Preview comment
			 *    comment_preview_{$type}
			 *    values <int>:
			 *      0 => disabled
			 *      1 => optional
			 *      2 => required
			 */
			//'preview' => 0,

			/**
			 *  Allow comment title
			 *    comment_subject_field_{$type}
			 *    values <int>:
			 *      0 => disallow
			 *      1 => allow
			 */
			//'subject-field' => 0,
			),
		),
	);
}

function custom_ct3_install() {
  // create the simple content type
  node_types_rebuild();
  $types = node_type_get_types();
  
  // create all the fields we are adding to our content type
  foreach (_custom_ct3_installed_fields() as $field) {
    field_create_field($field);
  }
  
  // create all the instance for our fields
  foreach (_custom_ct3_installed_instances() as $instance) {
    $instance['entity_type'] = 'node';
    $instance['bundle'] = 'custom_ct3';
    field_create_instance($instance);
  }
  
  // disable comments for this content type
  variable_set('comment_custom_ct3', COMMENT_NODE_CLOSED);
}

function _custom_ct3_installed_fields()  {
  // textfield
  $fields['custom_ct3_textfield'] = array(
    'field_name' => 'custom_ct3_textfield',
    'label' => t('A Textfield'),
    'type' => 'text',
    'module' => 'text',
  );
  // text area without filters
  $fields['custom_ct3_textarea'] = array(
    'field_name' => 'custom_ct3_textarea',
    'label' => t('A Textarea'),
    'type' => 'text_long',
    'module' => 'text',
    'translatable' => '1',
    'foreign keys' => array(
      'format' => array(
        'columns' => array(
          'format' => 'format',
        ),
        'table' => 'filter_format',
      ),
    ),
    'indexes' => array(
      'format' => array(
        0 => 'format',
      ),
    ),
  );
  // text area with filters
  $fields['custom_ct3_txtarea_fltr'] = array(
    'field_name' => 'custom_ct3_txtarea_fltr',
    'label' => t('A Textarea with format filters'),
    'type' => 'text_long',
    'module' => 'text',
    'translatable' => '1',
    'foreign keys' => array(
      'format' => array(
        'columns' => array(
          'format' => 'format',
        ),
        'table' => 'filter_format',
      ),
    ),
    'indexes' => array(
      'format' => array(
        0 => 'format',
      ),
    ),
  );
  
  return $fields;
}

function _custom_ct3_installed_instances()  {
  // textfield
  $instances['custom_ct3_textfield'] = array(
    'field_name' => 'custom_ct3_textfield',
    'type' => 'text',
    'label' => t('A Textfield'),
    'widget' => array(
      'type' => 'text_textfield',
      'weight' => '-1',
	  'settings' => array(
                'size' => '20',
		'max_length' => '100',
      ),
    ),
    'display' => array(
      'default' => array(
        'label' => 'inline',
        'settings' => array(),
        'type' => 'text_default',
        'weight' => -1,
      ),
      'teaser' => array(
        'label' => 'above',
        'settings' => array(),
        'type' => 'hidden',
        'weight' => -1,
      ),
    ),
  );
  // textarea without filters
  $instances['custom_ct3_textarea'] = array(
    'field_name' => 'custom_ct3_textarea',
    'type' => 'text_long',
    'label' => t('A Textarea'),
    'widget' => array(
      'settings' => array(
        'rows' => '5',
      ),
      'type' => 'text_textarea',
      'weight' => 0,
    ),
    'display' => array(
      'default' => array(
        'label' => 'above',
        'settings' => array(),
        'type' => 'text_default',
        'weight' => 0,
      ),
      'teaser' => array(
        'label' => 'above',
        'settings' => array(),
        'type' => 'hidden',
        'weight' => 0,
      ),
    ),
    'required' => 0,
    'settings' => array(
      'text_processing' => '0',
      'user_register_form' => FALSE,
    ),
  );
  // textarea with filters
  $instances['custom_ct3_txtarea_fltr'] = array(
    'field_name' => 'custom_ct3_txtarea_fltr',
    'type' => 'text_long',
    'label' => t('A Textarea with format filters'),
    'widget' => array(
      'settings' => array(
        'rows' => '5',
      ),
      'type' => 'text_textarea',
      'weight' => 1,
    ),
    'display' => array(
      'default' => array(
        'label' => 'above',
        'settings' => array(),
        'type' => 'text_default',
        'weight' => 1,
      ),
      'teaser' => array(
        'label' => 'above',
        'settings' => array(),
        'type' => 'hidden',
        'weight' => 1,
      ),
    ),
    'required' => 0,
    'settings' => array(
      'text_processing' => '1',
      'user_register_form' => FALSE,
    ),
  );
  
  return $instances;
}

//op het einde moet van disable uninstall gemaakt worden
function custom_ct3_disable() { 
	$sql = 'SELECT nid FROM {node} n WHERE n.type = :type';
	$result = db_query($sql, array(':type' => 'custom_ct3'));
	$nids = array();
	foreach ($result as $row) {
		$nids[] = $row->nid;
	}
	
	//delete any  variables made by module
	variable_del('comment_custom_ct3');
	variable_del('node_preview_custom_ct3');
	variable_del('node_submitted_custom_ct3');
	variable_del('node_options_custom_ct3');
	
	// Delete all the nodes at once
	node_delete_multiple($nids);
	
	$instance = array('field_name' => 'comment_body','bundle' => 'comment_node_custom_ct3','entity_type' => 'comment');
	field_delete_instance($instance);
	
	$instance = array('field_name' => 'body','bundle' => 'custom_ct3','entity_type' => 'node');
	field_delete_instance($instance);
	
	$fields = array_keys(_custom_ct3_installed_fields());
	foreach ($fields as $field) {
		field_delete_field($field);
	}
	
	// Purge all field infromation
	field_purge_batch(1000);
}