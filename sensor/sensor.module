<?php

require_once(drupal_get_path('module', 'coap_library') . '/coap_library_classes.inc');

// This hook is invoked during node viewing after the node is fully loaded
function node_content_view($node, $view_mode) {
	if($node->type == 'sensor'){
		$node->content['sensor_form'] = drupal_get_form('sensor_form', $node);
	}
	return $node;
}

function sensor_menu() {
  $items = array();
  $items["sensor/poll"] = array(
    "title" => "Discovery",
    "page callback" => "sensor_page_callback",
    "access callback" => true,
    "type" => MENU_CALLBACK
  );
  return $items;
}

function sensor_page_callback(){
	$output ='';
	
	if($user->uid != 0 && !isset($_SESSION['links'])){
		$result = db_select('sensor_CoAP_users','user_device')
				->fields('user_device', array('uid','device_uri'))
				->condition('uid', $user->uid, '=')
				->execute();
		foreach($result as $record){
			$device_uri = $record->device_uri;
		}
		
		$result = db_select('sensor_CoAP_core_links', 'links')
				->fields('links', array('device_uri','link_name','title'))
				->condition('device_uri', $device_uri, '=')
				->execute();
		foreach($result as $record){
			$output .= '<link>';
			$output .= '<link_name>';
			$output .= $record->link_name;
			$output .= '</link_name>';
			$output .= '<title>';
			$output .= $record->title;
			$output .= '</title>';
			$output .='</link>';
		}
	}	
	else{
		for($i=0 ; $i<count($_SESSION['links']) ; $i++){
			$output .= '<link>';
			$output .= '<link_name>';
			$output .= $_SESSION['links'][$i]['link_name'];
			$output .= '</link_name>';
			$output .= '<title>';
			$output .= $_SESSION['links'][$i]['title'];
			$output .= '</title>';
			$output .='</link>';
		}
	}
	
	print $output;
}

/**
 * Returns the list of steps and their associated forms.
 *
 * @return $array
 */
function _form_example_steps() {
  return array(
      1 => array(
        'form' => 'sensor_form_core',
      ),
      2 => array(
        'form' => 'sensor_form_resource',
      ),
    );
}

/**
 * Submit handler for the "previous" button.
 * - Stores away $form_state['values']
 * - Decrements the step counter
 * - Replaces $form_state['values'] with the values from the previous state.
 * - Forces form rebuild.
 */
function sensor_back_to_core_submit($form, &$form_state) {
  $current_step = &$form_state['step'];
  $form_state['step_information'][$current_step]['stored_values'] = $form_state['values'];
  if ($current_step > 1) {
    $current_step--;
    $form_state['values'] = $form_state['step_information'][$current_step]['stored_values'];
  }
  $form_state['rebuild'] = TRUE;
}

/**
 * Submit handler for the 'next' button.
 * - Saves away $form_state['values']
 * - Increments the step count.
 * - Replace $form_state['values'] from the last time we were at this page
 *   or with array() if we haven't been here before.
 * - Force form rebuild.
 *
 * @param $form
 * @param $form_state
 */
function sensor_select_resource_submit($form, &$form_state) {
	$link = $_SESSION['links'][$form_state['values']['table']];
	
	$current_step = &$form_state['step'];
	$form_state['step_information'][$current_step]['stored_values'] = $form_state['values'];

	if ($current_step < count($form_state['step_information'])) {
		$current_step++;
		if (!empty($form_state['step_information'][$current_step]['stored_values'])) {
			$form_state['values'] = $form_state['step_information'][$current_step]['stored_values'];
		}
		else {
			$form_state['values'] = array();
		}
		$form_state['values']['link'] = $link;
		dpm($form_state['values']['link']);
		$form_state['rebuild'] = TRUE;  // Force rebuild with next step.
		return;
	}
}

/**
 * The primary formbuilder function. This is the form that
 * you should call with drupal_get_form() from your code, and it will include
 * the rest of the step forms defined.
 *
 * This form has two defined submit handlers to process the different steps:
 *  - Previous: handles the way to get back one step in the wizard.
 *  - Next:     handles each step form submission,
 *
 * The third handler, the finish button handler, is the default form _submit
 * handler used to process the information.
 */
function sensor_form($form, &$form_state) {
	drupal_add_js('https://www.google.com/jsapi'); // JavaScript bestand toevoegen
	drupal_add_js(drupal_get_path('module', 'sensor') . '/js/sensor.js'); // JavaScript bestand toevoegen
	
	if (empty($form_state['step'])) {
		$form_state['step'] = 1;
		
		// This array contains the function to be called at each step to get the
		// relevant form elements. It will also store state information for each
		// step.
		$form_state['step_information'] = _form_example_steps();
	}
	
	$step = &$form_state['step'];
	//drupal_set_title(t('Sensor network: Step @step', array('@step' => $step)));
	
	// Call the function named in $form_state['step_information'] to get the
	// form elements to display for this step.
	$form = $form_state['step_information'][$step]['form']($form, $form_state);
	
	// Show the 'previous' button if appropriate. Note that #submit is set to
	// a special submit handler, and that we use #limit_validation_errors to
	// skip all complaints about validation when using the back button. The
	// values entered will be discarded, but they will not be validated, which
	// would be annoying in a "back" button.
	if ($step > 1) {
		$form['prev'] = array(
			'#type' => 'submit',
			'#value' => t('Core'),
			'#name' => 'prev',
			'#submit' => array('sensor_back_to_core_submit'),
			'#limit_validation_errors' => array(),
		);
	}

	// Show the Next button only if there are more steps defined.
	if ($step < count($form_state['step_information'])) {
		// The Next button should be included on every step
		$form['next'] = array(
			'#type' => 'submit',
			'#value' => t('Select'),
			'#name' => 'next',
			'#submit' => array('sensor_select_resource_submit'),
		);
	}
	else {
		// Just in case there are no more steps, we use the default submit handler
		// of the form wizard. Call this button Finish, Submit, or whatever you
		// want to show. When this button is clicked, the
		// form_example_wizard_submit handler will be called.
		// $form['finish'] = array(
			// '#type' => 'submit',
			// '#value' => t('Finish'),
		// );
	}

	// Include each validation function defined for the different steps.
	if (function_exists($form_state['step_information'][$step]['form'] . '_validate')) {
		$form['next']['#validate'] = array($form_state['step_information'][$step]['form'] . '_validate');
	}

	return $form;
}

function build_headers(){
return array
  (
    // 'link_name' => t('link name'),	
	// 'rt' => t('application-specific semantic type'),
	// 'ct' => t('content-type'),
	// 'if' => t('interface desciption'),
	// 'sz' => t('maximum size'),
	// 'title' => t('human-readable name'),
	// 'anchor' => t('anchor'),
	// 'rel' => t('rel'),
	
	'link_name' => t('link name'),
	'title' => t('human-readable name'),
  );
}

function build_options($links){
  $options = array();
  foreach($links as $link)
  {
    $options[$link['uid']] = array // each element of the array is keyed with the UID
    (
		// 'link_name' => $link['link_name'],
		// 'rt' => $link['rt'],
		// 'ct' => $link['ct'],
		// 'if' => $link['if'],
		// 'sz' => $link['sz'],
		// 'title' => $link['title'],
		// 'anchor' => $link['anchor'],
		// 'rel' => $link['rel'],	
		
		'link_name' => $link['link_name'],
		'title' => $link['title'],
	);
  }
  return $options;
}

/**
 * Custom validation form for the core page.
 */
function sensor_form_core_validate($form, &$form_state) {
	$regex = '/^(((?=(?>.*?(::))(?!.+\3)))\3?|([\dA-F]{1,4}(\3|:(?!$)|$)|\2))(?4){5}((?4){2}|(25[0-5]|(2[0-4]|1\d|[1-9])?\d)(\.(?7)){3})\z/i';
	if(!preg_match($regex, $form_state['values']['device_uri'], $matches)){
		form_set_error('device_uri', t('Please enter a valid IPv6-adres.'));
	}
}

/**
 * Returns form elements for core page. This is the
 * first step.
 */
function sensor_form_core($form, &$form_state) {
	global $user;
	
	//textfield for device uri
	$form['device_uri'] = array
	(
		'#type' => 'textfield',
		'#title' => t('Device IPv6 adress'),
		'#size' => 60,
		'#required' => TRUE,
	);
	//dpm($_SESSION);
	
	// if($user->uid != 0 && !isset($_SESSION['links']))
		// dpm('db');
	// else
		// dpm('cache');
	
	// if(isset($_SESSION['links'])){
		// dpm($_SESSION['links']);
		// drupal_set_message($_SESSION['links']);
	// }
	// else{
		// drupal_set_message('geen sessie');
	// }
	
	if($user->uid != 0){ //anonieme user	
		$_SESSION['links'] = array();	
		$result = db_select('sensor_CoAP_users','user_device')
				->fields('user_device', array('uid','device_uri'))
				->condition('uid', $user->uid, '=')
				->execute();
		foreach($result as $record){
			$device_uri = $record->device_uri;
			$form['device_uri']['#default_value'] = $device_uri;		
			$result = db_select('sensor_CoAP_core_links', 'links')
				->fields('links', array('device_uri','link_name','title'))
				->condition('device_uri', $device_uri, '=')
				->execute();
			$links = array();
			foreach($result as $record){
				$link = array();
				$link['link_name'] = $record->link_name;
				$link['title'] = $record->title;
				array_push($links,$link);
			} 		
			$_SESSION['links'] = $links;
		}
	}

	//button to reload the well-know/core
	$form['reload_device'] = array
	(
		'#type' => 'submit',
		'#value' => t('Reload device'),
		'#submit' => array('reload_device_core'),
	);
	
	//button to clear tableselect
	$form['clear_tableselect'] = array
	(
		'#type' => 'submit',
		'#value' => t('Clear'),
		'#attributes' => array('id' => 'core_table'),
		'#submit' => array('clear_tableselect'),
	);	

	$form['tableselect_container'] = array(
		'#type' => 'container',
		'#attributes' => array(
			'class' => array('class-name'),
		),
	);
	
	$links = array();
	
	//build headers
	$header = build_headers();
	
	//build options
	$options = build_options($links);
	
	$table = array
	(
		'#type' => 'tableselect',
		'#header' => $header,
		'#options' => $options,
		//'#empty' => t('No sensors found'),
		'#multiple' => FALSE,
	);
	
	if($user->uid != 0 && $result->rowCount() != 0)
		$table['#empty'] = 'Fetching sensors...';
	else		
		$table['#empty'] = 'Enter a URI and click on \'Reload device\' to display resources here.';
	
	$form['tableselect_container']['table']= $table;
  
	// $form['select'] = array
	// (
		// '#type' => 'submit',
		// '#value' => t('Select'),
		// '#submit' => array('show_sensor'),
	// );
	
	for($i=0 ; $i<0 ; $i++){
		dpm(variable_get("response_string_$i",0));
		//dpm(variable_get("response_string_$i",0));
		//dpm($i . ': ' . variable_get("discovery_request_$i", 0) . ' gelijk aan 4? ' . variable_get("next_length_$i",0));
		//dpm(variable_get("response_string_$i",0));
		//dpm(variable_get("response_hex_string_$i",0));
		//dpm(variable_get("option23_$i",0));
		//dpm(variable_get("bool_response_$i",0));
		//dpm(variable_get("has_next_$i", 0));
		//dpm(variable_get("has_next_$i", 0) . '|' . variable_get("message_id_$i", 0) . '|' . variable_get("message_id_next_$i", 0));
		//dpm('---------------------------------------------------');
	}
	
	//2001:6a8:1d80:200::2
	
	// drupal_add_js('https://www.google.com/jsapi'); // JavaScript bestand toevoegen
	// drupal_add_js(drupal_get_path('module', 'sensor') . '/js/sensor.js'); // JavaScript bestand toevoegen
	
	return $form;
}

//submit handler when clicked on reload device
function reload_device_core($form, &$form_state) {
	//dpm('reload submit');
	//background_process_start('start_discover', $form_state['values']['device_uri']);  
	start_discover($form_state['values']['device_uri']); //voorgrond
	$form_state['rebuild'] = TRUE;
}

//submit handler when clicked on reload device
function clear_tableselect($form, &$form_state) {
	global $user;
	if($user->uid!=0){
		db_delete('sensor_CoAP_users')
			->condition('uid', $user->uid, '=')
			->execute();
	}
	$_SESSION['links'] = array();
	$form_state['rebuild'] = TRUE;
}

function start_discover($ip){
	$coap_factory = new CoAPMessageFactory('sensor', $ip, '');
	$response_obj = null;
	$payloads = '';
	$has_more = true;
	while($has_more){
		$coap_message = $coap_factory->create_discovery_request($response_obj);
		$response_obj = $coap_message->send_message();
		if($response_obj){
			$option_value = $response_obj->get_option_value(23);
			if($option_value != -1){
				$has_more = coap_library_get_bit_from_hex(substr($option_value,strlen($option_value)-1,1),3);
				$payloads .= $response_obj->get_payload();
			}
			else $has_more = false;
		}
		else $has_more = false;
	}
	parse_discovery_payloads($ip,$payloads);
}

function parse_discovery_payloads($ip,$payloads){
	//dpm('payload geparsed');
	global $user;
	$links = array();
	$regex = '/<[^>]+>\s*(;\s*\w+\s*(=\s*(\w+|"[^"]*(\\.[^"]*)*")\s*)?)*/';
	preg_match_all($regex, $payloads, $resources);
	
	if($user->uid != 0){
		db_delete('sensor_CoAP_users')
				->condition('uid', $user->uid, '=')
				->execute();
		
		$query = db_delete('sensor_CoAP_core_links')
			->condition('device_uri', $ip, '=')
			->execute();
	}
	$id=-1;
	for($i=0 ; $i < count($resources[0]) ; $i++){
		if(preg_match('/^<([^>\?]+)[^>]*>\s*(;.+)?\s*$/', $resources[0][$i], $elements)){ //tweede nul moet $i zijn
			$uri = $elements[1];
			if (preg_match('/[a-zA-Z]+:\/\/[^\/]+.*/', $uri, $bin)) {
				// absolute URI, correct
			} else {
				// fix for old Contiki implementation and others which omit the leading '/' in the link format
				if (substr($uri,0,1)!='/') $uri = '/' . $uri;
			}
			if($elements[2]){
				preg_match_all('/;\s*\w+\s*(=\s*(\w+|"([^"]*(\\.[^"]*)*)"))?/',$elements[2],$tokens);
				
				$attributes = array(
					'device_uri' => $ip,
					'link_name' => $uri,
				);
				$link = array();
				$link['link_name'] = $uri;
				for($e=0 ; $e<count($tokens[0]) ; $e++){
					preg_match('/;\s*([^<"\s;,=]+)\s*(=\s*(([^<"\s;,]+)|"([^"]*(\\.[^"]*)*)"))?/',$tokens[0][$e],$keyvalues);
					if($keyvalues[1] != 'if') $attribute = $keyvalues[1];
					else $attribute = $keyvalues[1] . 'd';
					$attributes[$attribute] = (count($keyvalues)>2 ? ($keyvalues[4] ? $keyvalues[4] : $keyvalues[5]) : 1);
					
					$link[$attribute] = $attributes[$attribute];
				}
				array_push($links,$link);
			}
			
			if($user->uid != 0){			
				$id = db_insert('sensor_CoAP_core_links')
				->fields($attributes)
				->execute();
			}
		}
		else{
			//variable_set("response_string_$i", 'no match');
		}		
	}
	$_SESSION['links'] = $links;
	if($id != -1 && $user->uid != 0){ //tweede stuk is eigenlijk overbodig, maar je weet nooit
		$id = db_insert('sensor_CoAP_users')
			->fields(array(
				'uid' => $user->uid,
				'device_uri' => $ip,
				))
			->execute();
	}
}

/**
 * Returns form elements for the resource page. This is the
 * second step of the wizard.
 */
function sensor_form_resource($form, &$form_state) {
  $form = array();
  $form['city'] = array(
    '#type' => 'textfield',
    '#title' => t('City'),
    '#description' => t('Hint: Do not enter "San Francisco", and do not leave this out.'),
    '#required' => TRUE,
    '#default_value' => !empty($form_state['values']['city']) ? $form_state['values']['city'] : '',

  );
  return $form;
}

function sensor_receive_response(){
	//dpm('sensor_receive_response');
}

function sensor_receive_error($error_message, $ip, $resource){
	//dpm('sensor_receive_error');
}