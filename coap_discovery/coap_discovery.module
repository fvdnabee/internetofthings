<?php

require_once(drupal_get_path('module', 'coap_library') . '/coap_library_classes.inc');

function coap_discovery_menu() {
	$items = array();
	$items["coap_discovery/poll"] = array(
		"title" => "Discovery",
		"page callback" => "coap_discovery_page_callback",
		"access callback" => true,
		"type" => MENU_CALLBACK
	);
  return $items;
}

function coap_discovery_page_callback(){
	global $user;
	$output ='';
	
	//if($user->uid != 0 && !isset($_SESSION['links'])){
	if($user->uid != 0){
		$result = db_select('coap_discovery_users','user_device')
				->fields('user_device', array('uid','uri'))
				->condition('uid', $user->uid, '=')
				->execute();
		foreach($result as $record){
			$device_uri = $record->uri;
		}
		
		if($result->rowCount() != 0){
			$result = db_select('coap_discovery_resources', 'links')
					->fields('links', array('device_uri','link_name','title'))
					->condition('device_uri', $device_uri, '=')
					->execute();
			foreach($result as $record){
				$output .= '<link>';
				$output .= '<link_name>';
				$output .= $record->link_name;
				$output .= '</link_name>';
				$output .= '<title>';
				$output .= $record->title;
				$output .= '</title>';
				$output .='</link>';
			}
			if($result->rowCount() == 0) $output = 'No data in database about this device. Click on \'Refresh device\' to display resources.';
		}
	}	
	else{
		for($i=0 ; $i<count($_SESSION['links']) ; $i++){
			$output .= '<link>';
			$output .= '<link_name>';
			$output .= $_SESSION['links'][$i]['link_name'];
			$output .= '</link_name>';
			$output .= '<title>';
			$output .= $_SESSION['links'][$i]['title'];
			$output .= '</title>';
			$output .='</link>';
		}
	}
	
	print $output;
}

//////////
// FORM //
//////////

//Act on a node that is being assembled before rendering.
function coap_discovery_node_view($node, $view_mode, $langcode) {
	if($node->type == 'coap_discovery'){
		$node->content['coap_discovery_form'] = drupal_get_form('coap_discovery_form', $node);
	}
	return $node;
}

function coap_discovery_build_headers(){
return array
  (
  
    // 'link_name' => 'link name',	
	// 'rt' => 'application-specific semantic type',
	// 'ct' => 'content-type',
	// 'if' => 'interface desciption',
	// 'sz' => 'maximum size',
	// 'title' => 'human-readable name',
	// 'anchor' => 'anchor',
	// 'rel' => 'rel',
	
	'link_name' => 'link name',
	'title' => 'human-readable name',
  );
}

function coap_discovery_build_options($links){
  $options = array();
  $counter=1;
  foreach($links as $link)
  {
    //$options[$link['uid']] = array // each element of the array is keyed with the UID
	$options[$counter] = array // each element of the array is keyed with the UID
    (
	
		// 'link_name' => $link['link_name'],
		// 'rt' => $link['rt'],
		// 'ct' => $link['ct'],
		// 'if' => $link['if'],
		// 'sz' => $link['sz'],
		// 'title' => $link['title'],
		// 'anchor' => $link['anchor'],
		// 'rel' => $link['rel'],	
		
		'link_name' => $link['link_name'],
		'title' => $link['title'],
	);
	$counter++;
  }
  return $options;
}

/**
 * Custom validation form for the core page.
 */
function coap_discovery_form_validate($form, &$form_state) {
	$regex = '/^(((?=(?>.*?(::))(?!.+\3)))\3?|([\dA-F]{1,4}(\3|:(?!$)|$)|\2))(?4){5}((?4){2}|(25[0-5]|(2[0-4]|1\d|[1-9])?\d)(\.(?7)){3})\z/i';
	if(!preg_match($regex, $form_state['values']['device_uri'], $matches)){
		form_set_error('device_uri','Please enter a valid IPv6-adres.');
	}
}

/**
 * Returns form elements for core page. This is the
 * first step.
 */
function coap_discovery_form($form, &$form_state) {
	drupal_add_js(drupal_get_path('module', 'coap_discovery') . '/js/coap_discovery.js'); // JavaScript bestand toevoegen
	global $user;

	//textfield for device uri
	$form['device_uri'] = array
	(
		'#type' => 'textfield',
		'#title' => 'Device IPv6 adress',
		'#size' => 60,
		'#required' => TRUE,
	);
	
	
	
	if($user->uid !=0){
	//button to load a cached well-know/core
		$form['load_device'] = array
		(
			'#type' => 'submit',
			'#value' => 'Load device',
			'#submit' => array('coap_discovery_load_device_core_submit'),
		);
	}
	
	//button to refresh the well-know/core
	$form['refresh_device'] = array
	(
		'#type' => 'submit',
		'#value' => 'Refresh device',
		'#submit' => array('coap_discovery_refresh_device_core_submit'),
	);
	
	//button to clear tableselect
	$form['clear_tableselect'] = array
	(
		'#type' => 'submit',
		'#value' => 'Clear',
		'#attributes' => array('id' => 'core_table'),
		'#submit' => array('coap_discovery_clear_tableselect_submit'),
	);	

	$form['tableselect_container'] = array(
		'#type' => 'container',
		'#attributes' => array(
			'class' => array('class-name'),
		),
	);
	
	if($user->uid != 0){ //geen anonieme user	
		$_SESSION['links'] = array();	
		$result = db_select('coap_discovery_users','user_device')
				->fields('user_device', array('uid','uri'))
				->condition('uid', $user->uid, '=')
				->execute();
		foreach($result as $record){
			$device_uri = $record->uri;
			$form['device_uri']['#default_value'] = $device_uri;		
			$db_links= db_select('coap_discovery_resources', 'links')
				->fields('links', array('device_uri','link_name','title'))
				->condition('device_uri', $device_uri, '=')
				->execute();
			$links = array();
			foreach($db_links as $record){
				$link = array();
				$link['link_name'] = $record->link_name;
				$link['title'] = $record->title;
				array_push($links,$link);
			} 		
			$_SESSION['links'] = $links;
		}
	}
	
	if($user->uid != 0){ //geen anonieme user
		$result = db_select('coap_discovery_users','user_device')
				->fields('user_device', array('uid','uri'))
				->condition('uid', $user->uid, '=')
				->execute();
	}
	
	$links = array();
	
	//build headers
	$header = coap_discovery_build_headers();
	
	//build options
	$options = coap_discovery_build_options($links);
	
	$table = array
	(
		'#type' => 'tableselect',
		'#header' => $header,
		'#options' => $options,
		'#multiple' => TRUE,
	);
	
	if(($user->uid != 0 && isset($result) && $result->rowCount() != 0) || (isset($_SESSION) && $user->uid == 0 && $_SESSION['links'])){
		$table['#empty'] = 'Fetching sensors...';
		$form['device_uri']['#default_value'] = $result->fetchField(1);
	}
	else		
		$table['#empty'] = 'Enter a URI and click on \'Load device\' or \'Refresh device\' to display resources here.';
	
	$form['tableselect_container']['table']= $table;
	
	for($i=0 ; $i<0 ; $i++){
		dpm(variable_get("response_string_$i",0));
		//dpm(variable_get("response_string_$i",0));
		//dpm($i . ': ' . variable_get("discovery_request_$i", 0) . ' gelijk aan 4? ' . variable_get("next_length_$i",0));
		//dpm(variable_get("response_string_$i",0));
		//dpm(variable_get("response_hex_string_$i",0));
		//dpm(variable_get("option23_$i",0));
		//dpm(variable_get("bool_response_$i",0));
		//dpm(variable_get("has_next_$i", 0));
		//dpm(variable_get("has_next_$i", 0) . '|' . variable_get("message_id_$i", 0) . '|' . variable_get("message_id_next_$i", 0));
		//dpm('---------------------------------------------------');
	}
	
	$form['add'] = array(
		'#type' => 'submit',
		'#value' => 'Add',
		'#submit' => array('coap_discovery_add_resources'),
	);
	
	return $form;
}

/////////////////////
// submit handlers //
/////////////////////

function coap_discovery_load_device_core_submit($form, &$form_state) {
	//dpm('refresh submit');
	background_process_start('coap_discovery_load_device_core', $form_state['values']['device_uri']);  
	//coap_discovery_load_device_core($form_state['values']['device_uri']); //voorgrond
	$form_state['rebuild'] = TRUE;
}

function coap_discovery_refresh_device_core_submit($form, &$form_state) {
	//dpm('refresh submit');
	background_process_start('coap_discovery_start_discover', $form_state['values']['device_uri']);  
	//coap_discovery_start_discover($form_state['values']['device_uri']); //voorgrond
	$form_state['rebuild'] = TRUE;
}

function coap_discovery_clear_tableselect_submit($form, &$form_state) {
	global $user;
	if($user->uid!=0){
		db_delete('coap_discovery_users')
			->condition('uid', $user->uid, '=')
			->execute();
	}
	else $_SESSION['links'] = array();
	$form_state['rebuild'] = TRUE;
}

function coap_discovery_add_resources($form, &$form_state) {
	global $user;
	foreach($form_state['values']['table'] as $value){
		$link = $_SESSION['links'][$value];
		$uri = $form_state['values']['device_uri'] . $link['link_name'];
		
		$result = db_select('coap_resource_resources', 'resources')
			->fields('resources', array('uri'))
			->condition('uri', $uri, '=')
			->execute();
		
		if($result->rowCount() == 0){
			$id = db_insert('coap_resource_resources')
				->fields(array(
					'uri' => $uri,
					'observable' => 0, //dit kan ik uit een optie halen, momenteel standaard 0
					'last_error' => 'none',
				))
				->execute();
		}
		
		// Watch bij alle rijen van de user op nul zetten
		$num_updated = db_update('coap_resource_users')
			->fields(array(
				'watch' => 0,
			))
			->condition('uid', $user->uid, '=')
			->execute();
		
		// Watch van net toegevoegde URI op 1 zetten
		$result = db_select('coap_resource_users', 'coap_resource')
			->fields('coap_resource', array('uri'))
			->condition('uri', $uri, '=')
			->execute();
		
		if($result->rowCount() == 0){
			$id = db_insert('coap_resource_users')
				->fields(array(
					'uid' => $user->uid,
					'uri' => $uri,
					'observe' => 0,
					'watch' => 1,
					'responded' => 0,
				))
				->execute();
		}
		else{
			$num_updated = db_update('coap_resource_users')
				->fields(array(
					'watch' => 1,
				))
				->condition('uid', $user->uid, '=')
				->execute();
		}
	}
	
	//$form_state['values']['link'] = $link;

	$form_state['redirect'] = substr($form['#action'],1,-10);
	//$form_state['rebuild'] = TRUE;  // Force rebuild with next step.
	return;
}

//////////
// rest //
//////////
function coap_discovery_load_device_core($device_uri){
	global $user;
	$result = db_select('coap_discovery_resources', 'links')
				->fields('links', array('device_uri','link_name','title'))
				->condition('device_uri', $device_uri, '=')
				->execute();
	
	if($user->uid != 0){ //db aanpassen
		db_delete('coap_discovery_users')
				->condition('uid', $user->uid, '=')
				->execute();
		//if($result->rowCount() != 0){
			db_insert('coap_discovery_users')
					->fields(array(
						'uid' => $user->uid,
						'uri' => $device_uri,))
					->execute();
		//}
	}
	else { //sessie aanpassen
		
	}
}

function coap_discovery_start_discover($ip){
	$coap_factory = new CoAPMessageFactory('coap_discovery', $ip, '');
	$response_obj = null;
	$payloads = '';
	$has_more = true;
	while($has_more){
		$coap_message = $coap_factory->create_discovery_request($response_obj);
		$response_obj = $coap_message->send_message();
		if($response_obj){
			$option_value = $response_obj->get_option_value(23);
			if($option_value != -1){
				$has_more = coap_library_get_bit_from_hex(substr($option_value,strlen($option_value)-1,1),3);
				$payloads .= $response_obj->get_payload();
			}
			else $has_more = false;
		}
		else $has_more = false;
	}
	coap_discovery_parse_discovery_payloads($ip,$payloads);
}

function coap_discovery_parse_discovery_payloads($ip,$payloads){
	//dpm('payload geparsed');
	global $user;
	$links = array();
	$regex = '/<[^>]+>\s*(;\s*\w+\s*(=\s*(\w+|"[^"]*(\\.[^"]*)*")\s*)?)*/';
	preg_match_all($regex, $payloads, $resources);
	
	if($user->uid != 0){
		db_delete('coap_discovery_users')
				->condition('uid', $user->uid, '=')
				->execute();
		
		$query = db_delete('coap_discovery_resources')
			->condition('device_uri', $ip, '=')
			->execute();
	}
	$id=-1;
	for($i=0 ; $i < count($resources[0]) ; $i++){
		if(preg_match('/^<([^>\?]+)[^>]*>\s*(;.+)?\s*$/', $resources[0][$i], $elements)){ //tweede nul moet $i zijn
			$uri = $elements[1];
			if (preg_match('/[a-zA-Z]+:\/\/[^\/]+.*/', $uri, $bin)) {
				// absolute URI, correct
			} else {
				// fix for old Contiki implementation and others which omit the leading '/' in the link format
				if (substr($uri,0,1)!='/') $uri = '/' . $uri;
			}
			if($elements[2]){
				preg_match_all('/;\s*\w+\s*(=\s*(\w+|"([^"]*(\\.[^"]*)*)"))?/',$elements[2],$tokens);
				
				$attributes = array(
					'device_uri' => $ip,
					'link_name' => $uri,
				);
				$link = array();
				$link['link_name'] = $uri;
				for($e=0 ; $e<count($tokens[0]) ; $e++){
					preg_match('/;\s*([^<"\s;,=]+)\s*(=\s*(([^<"\s;,]+)|"([^"]*(\\.[^"]*)*)"))?/',$tokens[0][$e],$keyvalues);
					if($keyvalues[1] != 'if') $attribute = $keyvalues[1];
					else $attribute = $keyvalues[1] . 'd';
					$attributes[$attribute] = (count($keyvalues)>2 ? ($keyvalues[4] ? $keyvalues[4] : $keyvalues[5]) : 1);
					
					$link[$attribute] = $attributes[$attribute];
				}
				array_push($links,$link);
			}
			
			if($user->uid != 0){			
				$id = db_insert('coap_discovery_resources')
				->fields($attributes)
				->execute();
			}
		}
		else{
			//variable_set("response_string_$i", 'no match');
		}		
	}
	if($user->uid == 0) $_SESSION['links'] = $links;
	if($id != -1 && $user->uid != 0){ //tweede stuk is eigenlijk overbodig, maar je weet nooit
		$id = db_insert('coap_discovery_users')
			->fields(array(
				'uid' => $user->uid,
				'uri' => $ip,
				))
			->execute();
	}
}

function coap_discovery_receive_response($response_obj){
	dpm($response_obj);
	
	// als content format apllication link format is, skip dan al de shizzle
}

function coap_discovery_receive_error($error_message, $ip, $resource){
	//dpm($error_message);
}