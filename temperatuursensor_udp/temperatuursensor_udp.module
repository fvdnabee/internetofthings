<?php

/**
 * Implements hook_menu().
 * CreÃ«ert het pad waarnaar jQuery een ajax call kan uitvoeren en de callback-functie
 */
function temperatuursensor_udp_menu() {
  $items = array();
  $items["observe/ajax"] = array(
    "title" => "Nieuwe temperatuur",
    "page callback" => "temperatuur_udp_page_callback",
    "access callback" => true,
    "type" => MENU_CALLBACK
  );
  return $items;
}

///////////
// BLOCK //
///////////

/**
 * Implements hook_block_info().
 * Geeft informatie over de block die de module aanbiedt
 */
function temperatuursensor_udp_block_info() {
	$blocks['user_custom'] = array(
		'info' => t('Blok met mogelijkheid tot opvragen temperatuur met udp-sockets als onderliggende technologie'),
	);
	return $blocks;
}

/**
 * Implements hook_block_info().
 * Definieert de titel en inhoud van de block
 */
function temperatuursensor_udp_block_view($delta='') {
	$block = null;
	$block['subject'] = 'Temperatuur via udp';
	$block_content = null;
	$current_observe = variable_get('observe_udp', null);
	$block_content .= "<label>test: " . variable_get('test') . "</label>";
	$block_content .= "<label>Automatisch ophalen is momenteel " . (!isset($current_observe) || variable_get('observe_udp', null) == '0' ? 'niet ' : '') . " actief</label>";
	//HISTORY
	$query = db_select('temperaturen_udp', 'temperaturen_udp');
	$query
		->fields('temperaturen_udp', array('hid', 'response'))
		->orderBy('hid', 'DESC')
		->range(0,5);
	$result = $query->execute();
	$block_content .= "<table id='historytable_udp' ><tr><td>Hid</td><td>Response</td></tr>";
	$nr = 1;
	foreach ($result as $record){
		$hid = $record->hid;
		$origin = $record->response;
		$block_content .= "<tr><td id='hid_udp" . $nr . "' >" . $hid . "</td><td id='response_udp" . $nr . "' >" . $origin . "</td></tr>";
		$nr++;
	}
	$block_content .= "</table>";
	drupal_add_js(drupal_get_path('module', 'temperatuursensor_udp') .'/js/temperatuursensor_udp.js');
	$temp = drupal_get_form('temperatuur_udp_url_form');
	$block_content .= drupal_render($temp);
	$block['content'] = $block_content;
	return $block;
}

//////////
// FORM //
//////////

/**
 * Implements hook_form().
 * Voegt componenten toe aan de form
 */
function temperatuur_udp_url_form($form_in, &$form_state) {
	$form['wx_info_title'] = array (
		'#value' => t('Temperatuur'),
	);
	//$form['wx_info']['temperatuur_url'] = array (
	//	'#type' => 'textfield',
	//	'#size' => 20,
	//	'#maxlength' => 20,
	//);
	$options = array('Observe');
	$options_checked = array();
	$form['wx_info']['temperatuur_udp_url_checkbox'] = array (
		'#type' => 'checkbox',
		'#title' => t('Observe'),
		'#default_value' => cache_get('observe')->data,
		);
	$form['wx_info']['temperatuur_udp_url_submit'] = array (
		'#type' => 'submit',
		'#value' => t('Refresh'),
		);
	$form['#action'] = '/';
	return $form;
}

/**
 * Implements hook_form_submit().
 * functie die wordt uitgevoerd als het form ingediend wordt
 */
function temperatuur_udp_url_form_submit($form, $form_state) {
	$observe = $form_state['values']['temperatuur_udp_url_checkbox'];
	cache_set('observe', $observe, 'cache');
	if($observe == '1' && cache_get('observing')->data != "yes"){
		$handle = background_process_start('start_observing');
	}
}


//////////////////////
// PRIVATE FUNCTIES //
//////////////////////

// Functie die wordt uitgevoerd als een ajax call wordt uitgevoerd naar /observe/ajax, geeft de laatste entry terug
function temperatuur_udp_page_callback(){
	$query = db_select('temperaturen_udp', 'temperaturen_udp');
	$query
		->fields('temperaturen_udp', array('hid', 'response'))
		->orderBy('hid', 'DESC')
		->range(0,1);
	$result = $query->execute();
	$response = '<tr><td>';
	foreach ($result as $record){
		$hid = $record->hid;
		$origin = $record->response;
		$response .= $hid . "</td><td>" . $origin . "</td></tr>";
	}
	print $response;
}

// Functie die wacht tot max age is verstreken, om dan een nieuwe waarde op te halen, roept zichzelf op als er nog steeds automatisch opgehaald moet worden
function start_observing(){
	cache_set('observing', "yes", 'cache');
	$socket = pfsockopen("udp://[2001:6a8:1d80:200::2]", 5683, $errno, $errstr); // udp-socket openen
	$response = 'empty';
	$token = generate_token();
	if (!$socket) {
		echo "$errstr ($errno)<br />\n";
	} else {
		$out = "42";
		$out .= "01";
		$out .= generate_message_id_udp();
		$out .= $token;
		$out .= "60";
		$out .= "53";
		$out .= "6f6273";
		$binary = pack("H*", $out); // hexadecimaal omzetten naar binair
		$returnvalue = fwrite($socket, $binary); // wegschrijven naar udp-socket
		if($returnvalue != FALSE){
			$response = fread($socket, 128); // lezen van udp-socket
		}
	}
	while(cache_get('observe')->data == 1){
		if($response != 'empty' && $response != ''){
			variable_set('test', strToHex($response));
			$hid = db_insert('temperaturen_udp')
					->fields(array(
						'response' => substr($response, -5),
					))
					->execute();
		}
		$response = fread($socket, 128); // lezen van udp-socket
	}
	$out = "70";  // -------------------------------------> Reset message is juist maar message id moet die zijn van laatst ontvangen message van server
	$out .= "00";
	$out .= generate_message_id_udp();
	$binary = pack("H*", $out); // hexadecimaal omzetten naar binair
	$returnvalue = fwrite($socket, $binary); // wegschrijven naar udp-socket
	fclose($socket);
	cache_set('observing', "no", 'cache');
}

// Message id genereren dat nog niet gebruikt werd door telkens te incrementeren
function generate_message_id_udp(){
	$message_id = variable_get('current_message_id', null);
	if(!isset($message_id)){
		$message_id = rand(0, 65535);
	}
	else{
		$message_id++;
		$message_id % 65536;
	}
	variable_set('current_message_id', $message_id);
	$message_id = dechex($message_id);
	$message_id_string = strval($message_id);
	$message_id_string = str_pad($message_id_string, 4, "0", STR_PAD_LEFT);
	return $message_id_string;
}

// Token genereren dat nog niet gebruikt werd door telkens te incrementeren
function generate_token(){
	$token = variable_get('current_token', null);
	if(!isset($token)){
		$token = rand(0, 65535);
	}
	else{
		$token++;
		$token % 65536;
	}
	variable_set('current_token', $token);
	$token = dechex($token);
	$token_string = strval($token);
	$token_string = str_pad($token_string, 4, "0", STR_PAD_LEFT);
	return $token_string;
}

// karakterstring omzetten naar hexadecimalen
function strToHex($string)
{
    $hex='';
    for ($i=0; $i < strlen($string); $i++)
    {
        $hex .= dechex(ord($string[$i]));
    }
    return $hex;
}