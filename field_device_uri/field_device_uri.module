<?php
// $Id$


/**
 * Implementation of hook_field_info().
 */
function field_device_uri_field_info() {
  return array(
    'field_device_uri' => array(
      'label' => t('Device URI field'),
      'description' => t('Device URI field.'),
      'default_widget' => 'field_device_uri_widget',
      'default_formatter' => 'field_device_uri_formatter',
    ),
  );
}

/**
 * Implements hook_field_widget_info().
 */
function field_device_uri_field_widget_info() {
  return array(
    'field_device_uri_widget' => array(
      'label' => t('Device field form'),
      'field types' => array('field_device_uri'),
      'behaviors' => array(
        'multiple values' => FIELD_BEHAVIOR_DEFAULT,
        //Use FIELD_BEHAVIOR_NONE for no default value.
        'default value' => FIELD_BEHAVIOR_DEFAULT,
      ),
    ),
  );
}

/**
 * Implements hook_field_formatter_info().
 */
function field_device_uri_field_formatter_info() {
  return array(
    'field_device_uri_formatter' => array(
      'label' => t('Default'),
      'field types' => array('field_device_uri'),
    ),
  );
}

/**
 * Implements hook_field_formatter_view().
 * opgeroepen als content toegevoegd is en de pagina gerenderd w
 */
function field_device_uri_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();

  switch ($display['type']) {
    case 'field_device_uri_formatter':
      foreach ($items as $delta => $item) {
        $element[$delta]['#markup'] = theme('field_device_uri_formatter_default', $item);
      }
      break;
  }

  return $element;
}

/**
 * Implements hook_field_widget_form().
 * wordt uitgevoerd nadat field toegevoegd wordt aan content type en er opties van het veld ingesteld worden
 * en als je op add content van dit nieuwe content type klikt
 */
function field_device_uri_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
  $base = $element;
  if ($instance['widget']['type'] == 'field_device_uri_widget') {
    $widget = $instance['widget'];
    $settings = $widget['settings'];
    
    $element['uri'] = array(
      '#type' => 'textfield',
      '#title' => t('Device URI'),
      '#default_value' => isset($items[$delta]['uri']) ? $items[$delta]['uri'] : NULL,
      '#element_validate' => array('_field_device_uri_uri_validate'),
    );

  }
  return $element;
}

/**
 * Implementation of hook_field_is_empty().
 */
function field_device_uri_field_is_empty($item, $field) {
	if ($field['type'] == 'field_device_uri') {
		if (empty($item['uri'])) {
			return TRUE;
		}
	}
	return FALSE;
}

/**
 * Implementation of hook_field_settings_form().
 */
function field_device_uri_field_settings_form($field, $instance, $has_data) {
  if ($field['type'] == 'field_device_uri') {
    $settings = $field['settings'];
    $form = array();
    return $form;
  }
}

/**
 * Implementation of hook_field_validate().
 */
// function field_device_uri_field_validate($obj_type, $object, $field, $instance, $langcode, &$items, &$errors) {
  // if ($field['type'] == 'field_device_uri') {

  // }
// }

/**
 * Validation callback for a field_device_uri uri element.
 */
function _field_device_uri_uri_validate($element, &$form_state, $form) {
	$regex = '/^(((?=(?>.*?(::))(?!.+\3)))\3?|([\dA-F]{1,4}(\3|:(?!$)|$)|\2))(?4){5}((?4){2}|(25[0-5]|(2[0-4]|1\d|[1-9])?\d)(\.(?7)){3})\z/i';
	$value = $element['#value'];
	if (empty($value) || !preg_match($regex, $value, $matches)) {
		form_error($element, 'Please enter a valid IPv6-adres.');
	}
}

function field_device_uri_theme($existing, $type, $theme, $path) {
  return array(
    'field_device_uri_formatter_default' => array(
      'variables' => array('item' => NULL),
    ),
  );
}

function theme_field_device_uri_formatter_default($item) {
  
  $output = '';
  $output .= '<div class="field_device_uri-wrapper">';
  $output .= $item['uri'];
  $output .= '</div><br />';

  return $output;
}