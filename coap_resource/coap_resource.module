<?php

require_once(drupal_get_path('module', 'coap_library') . '/coap_library_classes.inc');
require_once(drupal_get_path('module', 'coap_resource') . '/includes/coap_discovery.inc');

/**
 * Implements hook_theme_registry_alter()
**/
function coap_resource_theme_registry_alter(&$theme_registry) {
  $mod_path = drupal_get_path('module', 'coap_resource') . '/templates';
  $theme_registry_copy = $theme_registry;       // munge on a copy
  _theme_process_registry($theme_registry_copy, 'phptemplate', 'theme_engine', 'pow', $mod_path);
  $theme_registry += array_diff_key($theme_registry_copy, $theme_registry);
  $hooks = array('node');
  foreach ($hooks as $h) {
    coap_resource_insert_after_first_element($theme_registry[$h]['theme paths'], $mod_path);
  }
}

/**
 * Helper function for re-ordering arrays (needed by theme_registry_alter)
*/
function coap_resource_insert_after_first_element(&$a, $element) {
  if(is_array($a)) {
    $first_element = array_shift($a);
    array_unshift($a, $first_element, $element);
  }
}

/**
 * Implementation of hook_help().
 */
function coap_resource_help($path, $arg) {
  switch ($path) {
    case 'admin/modules#description':
      return t('De coap_resource module stelt de gebruiker in staat een sensornetwerk gebruiksvriendelijk en dynamisch te beheren.');
    case 'admin/help#coap_resource':
      return t('<h3>Description:</h3><p>De coap_resource module stelt de gebruiker in staat een sensornetwerk gebruiksvriendelijk en dynamisch te beheren.</p>');
  }
}

/**
 * Implements hook_menu().
 * CreÃ«ert het pad waarnaar jQuery een ajax call kan uitvoeren en de callback-functie
 */
function coap_resource_menu() {
	$items = array();
	$items['admin/config/content/coap_resource'] = array(
		'title' => 'CoAP resource settings',
		'page callback' => 'drupal_get_form',
		'page arguments' => array('coap_resource_admin_settings'),
		'access callback' => TRUE,
		'description' => 'Global configuration of the CoAP resource module functionality.',
		'type' => MENU_NORMAL_ITEM,
	);
	$items["coap_resource/poll/%"] = array(
		"title" => "Get last entry",
		"page callback" => "coap_resource_poll",
		"page arguments" => array(2),
		"access callback" => true,
		"type" => MENU_CALLBACK
	);
	$items["coap_resource/discovery/%"] = array(
		"title" => "Discovery",
		"page callback" => "coap_discovery_page_callback",
		"page arguments" => array(2),
		"access callback" => true,
		"type" => MENU_CALLBACK
	);
	$items["coap_resource/interval/%"] = array(
		"title" => "Change polling interval",
		"page callback" => "coap_resource_change_interval",
		"page arguments" => array(2, 3),
		"access callback" => true,
		"type" => MENU_CALLBACK
	);
	$items["coap_resource/request/%"] = array(
		"title" => "Start GET request for given URI",
		"page callback" => "coap_resource_start_request_for_uri",
		"page arguments" => array(2, 3, 4),
		"access callback" => true,
		"type" => MENU_CALLBACK
	);
	$items["coap_resource/observe/%"] = array(
		"title" => "Starts observing the given URI",
		"page callback" => "coap_resource_handle_observing_for_uri",
		"page arguments" => array(2, 3),
		"access callback" => true,
		"type" => MENU_CALLBACK
	);

  return $items;
}

function coap_resource_admin_settings() {
	$form['message_container'] = array
	(
		'#type' => 'container',
		'#prefix' => "De configuratietab van de module coap_resources.",
	);
	$form = system_settings_form($form);
	return $form;
}

/**
 * Menu loader callback. Load a coap_resource node.
 */
function coap_resource_menu_load($nid) {
	if (!is_numeric($nid)) {
		return FALSE;
	}
	$node = node_load($nid);
	if (!isset($node->type) || ($node->type != 'coap_general' && $node->type != 'coap_device')) {
		return FALSE;
	}
	return $node;
}

//////////
// FORM //
//////////

//Act on a node that is being assembled before rendering.
function coap_resource_node_view($node, $view_mode, $langcode) {
	if($node->type == 'coap_resource'){
		$node->content['coap_resource_form'] = drupal_get_form('coap_resource_form', $node);
	}
	else if($node->type == 'coap_device'){
		$node->content['coap_discovery_form'] = drupal_get_form('coap_discovery_form', $node);
	}
	return $node;
}

//custom validatie van de uri velden wordt hier toegevoegd
function coap_resource_form_alter(&$form,$form_state,$form_id){
	if($form_id == 'coap_resource_node_form') {
		$form['#validate'][] = '_coap_resource_node_form_validate';		
    }
	if($form_id == 'coap_device_node_form') {
		$form['#validate'][] = '_coap_device_node_form_validate';
		//de user mag de node_references niet veranderen
		$form['field_resource_references']['#access'] = FALSE;
    }
	
}

//custom validatie voor resource_uri
function _coap_resource_node_form_validate(&$form,&$form_state) {
	global $user;;
	$regex = '/^(((?=(?>.*?(::))(?!.+\3)))\3?|([\dA-F]{1,4}(\3|:(?!$)|$)|\2))(?4){5}((?4){2}|(25[0-5]|(2[0-4]|1\d|[1-9])?\d)(\.(?7)){3}).+\z/i';
	$value = $form_state['values']['field_resource_uri'][LANGUAGE_NONE][0]['value'];
	if (empty($value) || !preg_match($regex, $value, $matches)) {
		form_set_error('field_resource_uri', 'Please enter a valid IPv6-adress for a resource.');
	}
	else if(!isset($form_state['values']['nid'])){
		$result = db_select('coap_resource_users','resource')
			->fields('resource', array('uri'))
			->condition('uri', $matches[0], '=')
			->condition('uid', $user->uid, '=')
			->execute();
		
		if($result->rowCount() != 0){
			form_set_error('field_resource_uri', 'You have already submitted this resource. Please enter another.');
		}
	}
}

//custom validatie voor device_uri
function _coap_device_node_form_validate(&$from,&$form_state) {
	global $user;
	$regex = '/^(((?=(?>.*?(::))(?!.+\3)))\3?|([\dA-F]{1,4}(\3|:(?!$)|$)|\2))(?4){5}((?4){2}|(25[0-5]|(2[0-4]|1\d|[1-9])?\d)(\.(?7)){3})\z/i';
	$value = $form_state['values']['field_device_uri'][LANGUAGE_NONE][0]['value'];
	
	if (empty($value) || !preg_match($regex, $value, $matches)) {
		form_set_error('field_device_uri', 'Please enter a valid IPv6-adress for a device.');
	}
	else if(!isset($form_state['values']['nid'])){
		$result = db_select('coap_resource_users','device')
			->fields('device', array('uri'))
			->condition('uri', $matches[0], '=')
			->condition('uid', $user->uid, '=')
			->execute();
		
		if($result->rowCount() != 0){
			form_set_error('field_device_uri', 'You have already submitted this resource. Please enter another.');
		}
	}
}

function coap_resource_form($form, &$form_state, $node) {
	drupal_add_js('https://www.google.com/jsapi'); // JavaScript bestand toevoegen
	drupal_add_js(drupal_get_path('module', 'coap_resource') . '/js/coap_resource.js'); // JavaScript bestand toevoegen	
	drupal_add_js(array('coap_resource' => array('module_path' => drupal_get_path('module', 'coap_resource'))), array('type' => 'setting'));
	global $user;
	
	//create_my_node();
	
	$nid = $node->nid;
	$form['nid'] = array
	(
		'#type' => 'hidden',
		'#value' => $node->nid,
	);	
	
	$current_interval = 1;
	$empty = TRUE;
	
	$query = db_select('coap_resource_users', 'users');
	$query->join('coap_resource_resources', 'resources', 'users.uri = resources.uri');
	$query
		->fields('users')
		->fields('resources')
		->condition('uid', $user->uid, '=')
		->condition('device',0,'=')
		->condition('nid',$nid,'=');
	$resources = $query->execute();
	
	$first_resource  = $resources->fetchAssoc();
	if(isset($first_resource)){
		$empty =0;
		$current_interval = $first_resource['polling_interval'];
		$uri = $first_resource['uri'];
	}
		
	if(!$empty && $empty != 1){
		$form['polling_container'] = array(
			'#type' => 'container',
			'#prefix' => "Polling gebeurt om de <input id='polling_invoer' type='text' size='1' value='" . $current_interval . "' > seconden. <button id='polling_button' type='button' >Wijzigen</button></br>",
		);
		
		if($node->type != 'coap_resource'){
			coap_resource_observe_form($form, $form_state, $nid);
			coap_resource_bekijken_form($form, $form_state, $nid);
		}
		else{
			if(isset($first_resource['obs'])){
				$form['observe'][$first_resource['uri']] = array(
					'#type' => 'hidden',
				);
				$form['observe_button'] = array(
					'#type' => 'submit',
					'#submit' => array('coap_resource_observe_form_submit'),
				);
				if(!$first_resource['observe']){
					$form['observe'][$first_resource['uri']]['#value'] = 1;
					$form['observe_button']['#default_value'] = 'Start observing';
				}
				else{
					$form['observe'][$first_resource['uri']]['#value'] = 0;
					$form['observe_button']['#default_value'] = 'Stop observing';
				}
			}
		}
		coap_resource_get_request_form($form, $form_state);
		coap_resource_put_request_form($form, $form_state);
		coap_resource_post_request_form($form, $form_state);
		coap_resource_delete_request_form($form, $form_state);
		
		// Tabel met geschiedenis van opvragingen(5 laatste)
		$result = db_select('coap_resource_values', 'coap_values')
			->fields('coap_values', array('hid', 'parsed_value', 'max_age', 'timestamp', 'uri', 'uid'))
			->condition('uri', $uri, '=')
			->condition('uid', $user->uid, '=')
			->orderBy('hid', 'DESC')
			->range(0,5)
			->execute();
		
		$prefix = "<tr><td colspan = '4' ><label id = 'response' >Response: </label></td><tr><td colspan = '4' ><label id = 'response_type' >Response type: </label></td></tr></table>";
		$prefix .= "<img style = 'visibility:hidden;' src = '' id = 'errorimg' /><label id='error' ></label>"; // elementen om fouten te tonen
		$prefix .= "<table id='historytable' ><tr><th>Hid</th><th>Value</th><th>Max age</th><th>Timestamp</th></tr>";
		$nr = 1;
		foreach ($result as $record){ // voegt telkens een rij toe aan de tabel, waarbij de elementen een id met een rij-nr erna krijgen
			$value = $record->parsed_value;
			$hid = $record->hid;
			$max_age = $record->max_age;
			$timestamp = $record->timestamp;
			$prefix .= "<tr><td id='hid" . $nr . "' >" . $hid . "</td><td id='temperatuur" . $nr . "' >" . $value . "</td><td id='max_age" . $nr . "' >" . $max_age . "</td><td id='timestamp" . $nr . "' >" . $timestamp . "</td></tr>";
			$nr++;
		}
		while($nr <= 5){ // voegt telkens een rij toe aan de tabel, waarbij de elementen een id met een rij-nr erna krijgen
			$prefix .= "<tr><td id='hid" . $nr . "' >/</td><td id='temperatuur" . $nr . "' > </td><td id='max_age" . $nr . "' > </td><td id='timestamp" . $nr . "' > </td></tr>";
			$nr++;
		}
		$prefix .= "</table>";
		
		$prefix .= "<div id = 'grafiek' ></div>"; // Grafiek
		
		$form['values_container'] = array(
			'#type' => 'container',
			'#prefix' => $prefix,
			'#attributes' => array(
				'class' => array('class-name'),
			),
		);
	}	
	return $form;
}


///////////
// BLOCK //
///////////

/**
 * Implements hook_block_info().
 * Geeft informatie over de block die de module aanbiedt
 */
function coap_resource_block_info() {
	$blocks['user_custom'] = array(
		'info' => t('Blok met mogelijkheid tot opvragen temperatuur en observeren van verloop van temperatuur'),
	);
	return $blocks;
}

/**
 * Implements hook_block_info().
 * Definieert de titel en inhoud van de block
 */
function coap_resource_block_view($delta='') {
	global $user;
	
	$block = null;
	$block['subject'] = 'Temperatuursensoren bevragen met het CoAP protocol';
	$block_content = null;
	
	$current_interval = 1;
	$query = db_select('coap_resource_users', 'users');
	$query
		->fields('users', array('uid', 'polling_interval'))
		->condition('uid', $user->uid, '=');
	$result = $query->execute();
	foreach ($result as $record){
		$current_interval = $record->polling_interval;
	}
	$block_content .= "Polling gebeurt om de <input id = 'polling_invoer' type = 'text' size = '1' value = '" . $current_interval . "' > seconden. <button id = 'polling_button' type = 'button' >Wijzigen</button>";
	
	// URI form
	$temp = drupal_get_form('coap_resource_uri_form');
	$block_content .= drupal_render($temp);
	
	// Observe form
	if($user->uid){
		$temp = drupal_get_form('coap_resource_observe_form');
		$block_content .= drupal_render($temp);
	}
	else{
		$block_content .= '<label>Wegens beschermingsredenen is de observe functionaliteit uitgeschakeld voor anonieme gebruikers. Log in indien u een sensor wenst te observen.</label>';
	}
	
	// Bekijken form
	$temp = drupal_get_form('coap_resource_bekijken_form');
	$block_content .= drupal_render($temp);
	
	// Table offering REST functionality
	$block_content .= "<table id = 'requests' ><th colspan = '4' >Request methods</th><tr><td>";
	
	// GET form
	$temp = drupal_get_form('coap_resource_get_request_form');
	$block_content .= drupal_render($temp) . "</td><td>";
	
	// PUT form
	$temp = drupal_get_form('coap_resource_put_request_form');
	$block_content .= drupal_render($temp) . "</td><td>";
	
	// POST form
	$temp = drupal_get_form('coap_resource_post_request_form');
	$block_content .= drupal_render($temp) . "</td><td>";
	
	// DELETE form
	$temp = drupal_get_form('coap_resource_delete_request_form');
	$block_content .= drupal_render($temp) . "</td></tr>";
	
	$block_content .= "<tr><td colspan = '4' ><label id = 'response' >Response: </label></td><tr><td colspan = '4' ><label id = 'response_type' >Response type: </label></td></tr></table>";
	
	
	$block_content .= "<img style = 'visibility:hidden;' src = '' id = 'errorimg' /><label id='error' ></label>"; // elementen om fouten te tonen
	
	// Te bekijken URI ophalen
	$query = db_select('coap_resource_users', 'users');
	$query
		->fields('users', array('uid', 'uri'))
		->condition('uid', $user->uid, '=');
	$result = $query->execute();
	$empty = TRUE;
	foreach($result as $record){
		$empty = FALSE;
		$uri = $record->uri;
	}
	
	if(!$empty){
		// Tabel met geschiedenis van opvragingen(5 laatste)
		$query = db_select('coap_resource_values', 'coap_values');
		$query
			->fields('coap_values', array('hid', 'parsed_value', 'max_age', 'timestamp', 'uri', 'uid'))
			->condition('uri', $uri, '=')
			->condition('uid', $user->uid, '=')
			->orderBy('hid', 'DESC')
			->range(0,5);
		$result = $query->execute();
		$block_content .= "<table id='historytable' ><tr><th>Hid</th><th>Value</th><th>Max age</th><th>Timestamp</th></tr>";
		$nr = 1;
		foreach ($result as $record){ // voegt telkens een rij toe aan de tabel, waarbij de elementen een id met een rij-nr erna krijgen
			$value = $record->parsed_value;
			$hid = $record->hid;
			$max_age = $record->max_age;
			$timestamp = $record->timestamp;
			$block_content .= "<tr><td id='hid" . $nr . "' >" . $hid . "</td><td id='temperatuur" . $nr . "' >" . $value . "</td><td id='max_age" . $nr . "' >" . $max_age . "</td><td id='timestamp" . $nr . "' >" . $timestamp . "</td></tr>";
			$nr++;
		}
		while($nr <= 5){ // voegt telkens een rij toe aan de tabel, waarbij de elementen een id met een rij-nr erna krijgen
			$block_content .= "<tr><td id='hid" . $nr . "' >/</td><td id='temperatuur" . $nr . "' > </td><td id='max_age" . $nr . "' > </td><td id='timestamp" . $nr . "' > </td></tr>";
			$nr++;
		}
		$block_content .= "</table>";
		
		$block_content .= "<div id = 'grafiek' ></div>"; // Grafiek
	}
	
	$block['content'] = $block_content;
	// drupal_add_js('https://www.google.com/jsapi'); // JavaScript bestand toevoegen
	// drupal_add_js(drupal_get_path('module', 'coap_resource') . '/js/coap_resource.js'); // JavaScript bestand toevoegen
	return $block;
}

//////////////////////
//   OBSERVE FORM 	//
//////////////////////

/**
 * Implements hook_form().
 * Voegt componenten toe aan de form
 */
function coap_resource_observe_form(&$form, &$form_state, $nid) {
	global $user;
	$form['title'] = array (
		'#value' => t('Observe Form'),
	);
	
	//indien alleen de observables een checkbox mogen krijgen:
	// $query = db_select('coap_resource_users', 'users');
	// $query->join('coap_resource_resources', 'resources', 'users.uri = resources.uri');
	// $query
		// ->fields('users', array('uid', 'uri', 'device', 'observe'))
		// ->fields('resources', array('obs'))
		// ->condition('uid', $user->uid, '=')
		// ->condition('device',0,'=')
		// ->condition('nid',$nid,'=');
	// $resources = $query->execute();

	// foreach ($resources as $record){
		// if($record->obs == 1){
			// $form['observe'][$record->uri] = array(
				// '#type' => 'checkbox',
				// '#title' => $record->uri,
				// '#default_value' => $record->observe,
			// );
		// }
	// }

	// Checkbox per observable resource
	$result = db_select('coap_resource_users', 'users')
		->fields('users', array('uid', 'uri', 'device', 'observe'))
		->condition('uid', $user->uid,'=')
		->condition('device', 0,'=')
		->condition('nid', $nid,'=')
		->execute();
	foreach ($result as $record){
		$form['observe'][$record->uri] = array(
			'#type' => 'checkbox',
			'#title' => $record->uri,
			'#default_value' => $record->observe,
		);
	}
	
	// Submit-knop
	$form['observe']['submit'] = array (
		'#type' => 'submit',
		'#submit' => array('coap_resource_observe_form_submit'),
		'#value' => t('Observe'),
	);
	return $form;
}

/**
 * Implements hook_form_submit().
 * functie die wordt uitgevoerd als het formulier ingediend wordt
 */
function coap_resource_observe_form_submit($form, $form_state) {
	global $user;
	
	//	Get URI's for this user and for this node
	$result = db_select('coap_resource_users', 'users')
		->fields('users', array('uid', 'uri'))
		->condition('uid', $user->uid, '=')
		->condition('device', 0, '=')
		->condition('nid', $form_state['values']['nid'], '=')
		->execute();
	foreach ($result as $record){
		//	Get number of observers for the current URI
		$observe_result = db_select('coap_resource_users', 'users')
			->fields('users', array('uid', 'uri', 'observe'))
			->condition('uri', $record->uri, '=')
			->condition('device', 0, '=')
			->condition('observe', 1, '=')
			->execute();
		$num_observers = $observe_result->rowCount();
		
		//	Start observing the current URI if this user is interested and no one else was already observing
		if($form_state['values'][$record->uri] != 0 && $num_observers == 0){
			background_process_start('coap_resource_start_observing', $record->uri);
		}
		
		//	Store in database that this user is observing or not observing the current URI
		$num_updated = db_update('coap_resource_users')
			->fields(array(
				'observe' => $form_state['values'][$record->uri],
			))
			->condition('uri', $record->uri, '=')
			->condition('uid', $user->uid, '=')
			->condition('device', 0, '=')
			->condition('nid', $form_state['values']['nid'], '=')
			->execute();
		
		//	Get number of users that is still observing the current URI
		$observe_result = db_select('coap_resource_users', 'users')
			->fields('users', array('uid', 'uri', 'observe'))
			->condition('uri', $record->uri, '=')
			->condition('device', 0, '=')
			->condition('observe', 1, '=')
			->execute();
		
		//	Stop observing the URI if no one is interested anymore
		if($observe_result->rowCount() == 0){
			coap_library_stop_observing('coap_resource', $record->uri);
		}
	}
}


//////////////////////
// GET REQUEST FORM //
//////////////////////

/**
 * Implements hook_form().
 * Voegt componenten toe aan de form
 */
function coap_resource_get_request_form(&$form, &$form_state) {
	
	// Submit-knop
	$form['wx_info']['get_request_submit'] = array (
		'#type' => 'submit',
		'#submit' => array('coap_resource_get_request_form_submit'),
		'#value' => t('GET'),
		'#prefix' => "<table id = 'requests' ><th colspan = '4' >Request methods</th><tr><td>",
		'#suffix' => "</td><td>",
		);
		
	return $form;
}

/**
 * Implements hook_form_submit().
 * functie die wordt uitgevoerd als het formulier ingediend wordt
 */
function coap_resource_get_request_form_submit($form, $form_state) {
	$handle = background_process_start('coap_resource_start_request', 'GET', $form_state['values']['nid']);
}


//////////////////////
// PUT REQUEST FORM //
//////////////////////

/**
 * Implements hook_form().
 * Voegt componenten toe aan de form
 */
function coap_resource_put_request_form(&$form, &$form_state) {	
	// Invoer voor PUT
	$form['wx_info']['put_request_input'] = array (
		'#type' => 'textfield',
		'#title' => 'input',
		'#size' => 35,
		);
	
	// Submit-knop
	$form['wx_info']['put_request_submit'] = array (
		'#type' => 'submit',
		'#submit' => array('coap_resource_put_request_form_submit'),
		'#value' => t('PUT'),
		'#suffix' => "</td><td>",
		);
	
	return $form;
}

/**
 * Implements hook_form_submit().
 * functie die wordt uitgevoerd als het formulier ingediend wordt
 */
function coap_resource_put_request_form_submit($form, $form_state) {
	//$handle = background_process_start('coap_resource_start_request', 'PUT', $form_state['values']['nid'], $form_state['values']['put_request_input']);
	coap_resource_start_request('PUT', $form_state['values']['nid'], $form_state['values']['put_request_input']);
}


///////////////////////
// POST REQUEST FORM //
///////////////////////

/**
 * Implements hook_form().
 * Voegt componenten toe aan de form
 */
function coap_resource_post_request_form(&$form, &$form_state) {	
	// Invoer voor POST
	$form['wx_info']['post_request_input'] = array (
		'#type' => 'textfield',
		'#title' => 'input',
		'#size' => 35,
		);
	
	// Submit-knop
	$form['wx_info']['post_request_submit'] = array (
		'#type' => 'submit',
		'#submit' => array('coap_resource_post_request_form_submit'),
		'#value' => t('POST'),
		'#suffix' => "</td><td>",
		);
		
	return $form;
}

/**
 * Implements hook_form_submit().
 * functie die wordt uitgevoerd als het formulier ingediend wordt
 */
function coap_resource_post_request_form_submit($form, $form_state) {
	$handle = background_process_start('coap_resource_start_request', 'POST', $form_state['values']['nid'], $form_state['values']['post_request_input']);
}


/////////////////////////
// DELETE REQUEST FORM //
/////////////////////////

/**
 * Implements hook_form().
 * Voegt componenten toe aan de form
 */
function coap_resource_delete_request_form(&$form, &$form_state) {
	// Submit-knop
	$form['wx_info']['delete_request_submit'] = array (
		'#type' => 'submit',
		'#submit' => array('coap_resource_delete_request_form_submit'),
		'#value' => t('DELETE'),
		'#suffix' => "</td></tr>",
		);
	
	return $form;
}

/**
 * Implements hook_form_submit().
 * functie die wordt uitgevoerd als het formulier ingediend wordt
 */
function coap_resource_delete_request_form_submit($form, $form_state) {
	$handle = background_process_start('coap_resource_start_request', 'DELETE', $form_state['values']['nid']);
}

///////////////////////
// NODE MANIPULATION //
///////////////////////

function coap_resource_node_insert($node){
	global $user;
	$nid = $node->nid;
	
	if($node->type == 'coap_resource'){
		//haal de resource_uri uit $node
		$uri = $node->field_resource_uri['und'][0]['value'];
		
		//voeg toe in de db dat de user geÃ¯nteresseerd is in deze resource op deze node
		$id = db_insert('coap_resource_users')
			->fields(array(
				'uid' => $user->uid,
				'uri' => $uri,
				'device' => 0,
				'nid' => $nid,
				'observe' => 0,
				'responded' => 0,
				'version_time' => time(),
			))
			->execute();
		
		//kijk in de db of er al informatie over deze resource inzit
		$result = db_select('coap_resource_resources', 'resources')
			->fields('resources', array('uri'))
			->condition('uri', $uri, '=')
			->execute();
		
		//zoniet
		if($result->rowCount() == 0){
			//Query filtering 			
			background_process_start('_start_filtered_discovery', $uri, $nid);
		}
		
	}
	else if($node->type == 'coap_device'){
		$device_uri = $node->field_device_uri['und'][0]['value'];
		
		//heeft de gebruiker dit device al toegevoegd?
		$result = db_select('coap_resource_users', 'coap_user')
			->fields('coap_user', array('uri','uid','device'))
			->condition('uri', $device_uri, '=')
			->condition('uid', $user->uid, '=')
			->condition('device', 1, '=')
			->execute();
		
		if($result->rowCount() == 0){
			//heeft iemand interesse in het device? m.a.w. is er al een discovery uitgevoerd?
			$result = db_select('coap_resource_users', 'coap_user')
				->fields('coap_user', array('uri','device'))
				->condition('uri', $device_uri, '=')
				->condition('device', 1, '=')
				->execute();
				
			if($result->rowCount() == 0){
				//voer discovery uit, zet flag zodat de resources gecreÃ«erd en gereferenced worden in de discovery callback -> vlag wordt onderaan gezet
				$new = 1;
				$version_time = time();
				background_process_start('_start_discovery', $device_uri, $nid);
			}
			else{
				//zet de vlag zodat de resources gecreÃ«erd en gereferenced worden in de discovery callback -> vlag wordt onderaan gezet
				$new = 2;
				$version_time = time();
			}
			
			//toevoegen dat de user geÃ¯nteresseerd is moet sowieso
			$id = db_insert('coap_resource_users')
			->fields(array(
				'uid' => $user->uid,
				'uri' => $device_uri,				
				'nid' => $nid,
				'device' => 1,
				'new' => $new,
				'version_time' => $version_time,
			))
			->execute();
			
		}
		else{
			//throw exception
		}
	}
	
}

function coap_resource_node_delete($node){
	global $user;
	$nid = $node->nid;
	//eigenlijk mag volgende query voor beide content types gebruikt worden en de device conditie weggelaten
	if($node->type == 'coap_resource'){
		db_delete('coap_resource_users')
			//->condition('uid', $user->uid, '=')
			->condition('nid', $nid, '=')
			->condition('device',0,'=')
			->execute();
	}
	else if($node->type == 'coap_device'){
		db_delete('coap_resource_users')
			//->condition('uid', $user->uid, '=')
			->condition('nid', $nid, '=')
			->condition('device',1,'=')
			->execute();
	}
}

//////////////////////
// PRIVATE FUNCTIES //
//////////////////////

// Functie die wordt uitgevoerd als een ajax call wordt uitgevoerd naar /coap_resource/poll, geeft de laatste entry terug
function coap_resource_poll($uri){
	global $user;
	
	$uri = str_replace('|', '/', $uri); //	Put slashes back in the URI
	
	$output = "<poll><uri>" . $uri . "</uri>";
	
	//	Retrieve last error from database
	$resources_query = db_select('coap_resource_resources', 'resources');
	$resources_query
		->fields('resources', array('uri', 'last_error'))
		->condition('uri', $uri, '=');
	$resources_result = $resources_query->execute();
	foreach($resources_result as $resources_record){
		$output .= "<error>" . $resources_record->last_error . "</error>";
	}
	
	//	Retrieve new values from database
	$query = db_select('coap_resource_values', 'coap_values');
	$query
		->fields('coap_values', array('hid', 'uid', 'timestamp', 'max_age', 'parsed_value', 'uri'))
		->condition('uri', $uri, '=')
		->condition('uid', $user->uid, '=')
		->condition('new', 1, '=')
		->orderBy('hid', 'DESC');
	$result = $query->execute();
	$output .= "<entrys>";
	foreach ($result as $record){
		//	Store in the database that this value has been fetched and therefore not new anymore
		$hid = $record->hid;
		$num_updated = db_update('coap_resource_values')
		->fields(array(
			'new' => 0,
		))
		->condition('hid', $hid, '=')
		->execute();
		
		//	Add the current value to the output
		$timestamp = $record->timestamp;
		$coap_value = $record->parsed_value;
		$max_age = $record->max_age;
		$output .= "<entry><hid>" . $hid . "</hid><value>" . $coap_value . "</value><max_age>" . $max_age . "</max_age><timestamp>" . $timestamp . "</timestamp></entry>";
	}
	$output .= "</entrys></poll>";
	
	//	return the output
	print $output;
}

//	Change the interval that the polling mechanism is using for this user, this is a callback for /temperatuursensor/interval/%
function coap_resource_change_interval($uri, $interval){
	global $user;
	
	$uri = str_replace('|', '/', $uri); //	Put slashes back in the URI
	
	$seconds = intval($interval);
	$id = db_update('coap_resource_users')
			->fields(array(
				'polling_interval' => $seconds,
			))
			->condition('uid', $user->uid, '=')
			->condition('uri', $uri, '=')
			->execute();
}

// 	Start the observing mechanism for the resource with given URI
//	If the resource is not observable, the values will be retrieved periodically
function coap_resource_start_observing($uri){
	$pattern = '/([^\/]+)\/(.*)/i';
	if(preg_match($pattern, $uri, $matches)){
		$ip = $matches[1];
		$resource = $matches[2];
		
		$coap_factory = new CoAPMessageFactory('coap_resource', $ip, $resource);
		
		//	Get the record from the database for given URI if it's observable, to check if the resource is observable
		$query = db_select('coap_resource_resources', 'resources');
		$query
			->fields('resources', array('uri', 'obs'))
			->condition('obs', 1, '=')
			->condition('uri', $uri, '=');
		$result = $query->execute();
		
		if($result->rowCount() > 0){
			// resource is observable
			$message = $coap_factory->create_observe_get_request($resource);
			$message->send_message();
		}
		else{
			// resource is not observable
			$message = $coap_factory->create_basic_get_request($resource);
			$query = db_select('coap_resource_users', 'users');
			$query
				->fields('users', array('uri', 'observe'))
				->condition('observe', 1, '=')
				->condition('uri', $uri, '=');
			$result = $query->execute();
			while($result->rowCount() > 0){
				$response_obj = $message->send_message();
				coap_resource_receive_notification($response_obj);
				sleep(5); // WAARDE NOG AANPASSEN NAAR EEN GEKOZEN WAARDE DOOR DE GEBRUIKER OF DE MAX AGE
				$result = $query->execute();
			}
		}
	}
}

//	Hook that is being called by CoAP library when observers of a given resource should stop observing
function coap_resource_stop_observers($ip, $resource){
	$num_updated = db_update('coap_resource_users')
			->fields(array(
				'observe' => 0,
			))
			->condition('uri', $ip . "/" . $resource, '=')
			->execute();
}

//	Returns the number of observers that are observing the given resource
function coap_resource_get_number_of_observers($ip, $resource){
	$query = db_select('coap_resource_users', 'users');
	$query
		->fields('users', array('uri', 'observe'))
		->condition('uri', $ip . "/" . $resource, '=')
		->condition('observe', 1, '=');
	$result = $query->execute();
	return $result->rowCount();
}

// 	Creates and sends the CoAP message with given method and payload
//	IPv6-address and URI-path are extracted from the database
function coap_resource_start_request($method, $nid, $payload=''){
	global $user;
	
	//	Gets the URI for the resource that is selected by the user
	$result = db_select('coap_resource_users', 'users')
		->fields('users', array('uid', 'uri', 'nid', 'device'))
		->condition('uid', $user->uid, '=')
		->condition('device', 0, '=')
		->condition('nid', $nid, '=')
		->execute();
	foreach($result as $record){
		$uri = $record->uri;
	}
		
	$pattern = '/([^\/]+)\/(.*)/i';
	if(preg_match($pattern, $uri, $matches)){
		//	Build message
		$coap_factory = new CoAPMessageFactory('coap_resource', $matches[1], $matches[2]);
		switch ($method) {
			case 'GET':
				$coap_message = $coap_factory->create_basic_get_request($matches[2]);
				break;
			case 'PUT':
				$coap_message = $coap_factory->create_basic_put_request($matches[2]);
				break;
			case 'POST':
				$coap_message = $coap_factory->create_basic_post_request($matches[2]);
				break;
			case 'DELETE':
				$coap_message = $coap_factory->create_basic_delete_request($matches[2]);
				break;
		}
		if($payload != ''){
			$coap_message->set_payload(coap_library_string_to_hex_with_padding($payload));
		}
		
		$response_obj = null;
		
		if($method == "GET"){
			//	Get last value from the database for the given resource to check if value is still valid and use this value if it's still valid
			$cache_query = db_select('coap_resource_values', 'coap_resource_values');
			$cache_query
				->fields('coap_resource_values', array('uri', 'uid', 'hid', 'original_response', 'max_age', 'timestamp'))
				->condition('uri', $uri, '=')
				->condition('uid', $user->uid, '=')
				->orderBy('hid', 'DESC')
				->range(0,1);
			$cache_result = $cache_query->execute();
			foreach($cache_result as $cache_record){
				//	Check if the last value has a max age and if it has, check if the value is still valid
				if($cache_record->max_age != null && time()-strtotime($cache_record->timestamp) < intval($cache_record->max_age)){
					$response_obj = $coap_factory->create_message_with_given_hex_message($cache_record->original_response);
				}
			}
		}
		
		//	Get new value if previous isn't still valid or isn't GET
		if($response_obj == null){
			$response_obj = $coap_message->send_message();
			if($response_obj != null){
				//	Insert the response into the database to add to the history of responses
				coap_resource_insert_response_into_database($response_obj, $user->uid);
			}
		}
		
		if($response_obj != null){
			//	Insert the response into the database for the current user
			coap_resource_give_response_to_user($response_obj, $method);
		}
	}
}

// 	Creates and sends the CoAP message with given method for the given URI
function coap_resource_start_request_for_uri($method, $uri, $payload=''){

	$uri = str_replace('|', '/', $uri);
	global $user;
	
	$pattern = '/([^\/]+)\/(.*)/i';
	if(preg_match($pattern, $uri, $matches)){
		//	Build message
		$coap_factory = new CoAPMessageFactory('coap_resource', $matches[1], $matches[2]);
		switch ($method) {
			case 'GET':
				$coap_message = $coap_factory->create_basic_get_request($matches[2]);
				break;
			case 'PUT':
				$coap_message = $coap_factory->create_basic_put_request($matches[2]);
				break;
			case 'POST':
				$coap_message = $coap_factory->create_basic_post_request($matches[2]);
				break;
			case 'DELETE':
				$coap_message = $coap_factory->create_basic_delete_request($matches[2]);
				break;
		}
		if($payload != ''){
			$coap_message->set_payload(coap_library_string_to_hex_with_padding($payload));
		}
		
		$response_obj = null;
		
		if($method == "GET"){
			//	Get last value from the database for the given resource to check if value is still valid and use this value if it's still valid
			$cache_query = db_select('coap_resource_values', 'coap_resource_values');
			$cache_query
				->fields('coap_resource_values', array('uri', 'uid', 'hid', 'original_response', 'max_age', 'timestamp'))
				->condition('uri', $uri, '=')
				->condition('uid', $user->uid, '=')
				->orderBy('hid', 'DESC')
				->range(0,1);
			$cache_result = $cache_query->execute();
			foreach($cache_result as $cache_record){
				//	Check if the last value has a max age and if it has, check if the value is still valid
				if($cache_record->max_age != null && time()-strtotime($cache_record->timestamp) < intval($cache_record->max_age)){
					$response_obj = $coap_factory->create_message_with_given_hex_message($cache_record->original_response);
				}
			}
		}
		
		//	Get new value if previous isn't still valid or isn't GET
		if($response_obj == null){
			$response_obj = $coap_message->send_message();
			if($response_obj != null){
				//	Insert the response into the database to add to the history of responses
				coap_resource_insert_response_into_database($response_obj, $user->uid);
			}
		}
		
		if($response_obj != null){
			print "<uri>" . $uri . "</uri><method>" . $method . "</method><response>" . $response_obj->get_payload_text() . "</response><code>" . $response_obj->get_numeric_message_code() . "</code>";
		}
	}
}

// Gets the temperature out of a payload (Celsius)
// Returns the original payload if temperature could not be parsed
function coap_resource_get_temperature($payload){
	$pattern = '/value\s+(.*)C/i';
	if(preg_match($pattern, $payload, $matches)){
		$temperature = $matches[1];
		return $temperature;
	}
	else{
		return $payload;
	}
}

//	Hook being called by the CoAP library if something went wrong when communicating with the resource with given ip and URI-path
function coap_resource_receive_error($error_message, $ip, $resource){
	$num_updated = db_update('coap_resource_resources')
			->fields(array(
				'last_error' => $error_message,
			))
			->condition('uri', $ip . "/" . $resource, '=')
			->execute();
}

//	Hook that gets called by the CoAP library when a notification arrives from a resource that is being observed
//	Adds the given response to the database for every interested user
function coap_resource_receive_notification($response_obj){
	global $user;
	
	//	Add the notification to the database for the current user
	coap_resource_insert_response_into_database($response_obj, $user->uid);
	
	//	Get interested user different from the current user
	$query = db_select('coap_resource_users', 'users');
	$query
		->fields('users', array('uri', 'uid', 'observe'))
		->condition('uri', $response_obj->get_ip() . '/' . $response_obj->get_resource(), '=')
		->condition('observe', 1, '=')
		->condition('uid', $user->uid, '!=');
	$result = $query->execute();
	
	//	Add response to the database for every user that is interested, except from the current user
	foreach($result as $record){
		coap_resource_insert_response_into_database($response_obj, $record->uid);
	}
}

//	Adds the given response to the current user so the user can see the response (via database)
function coap_resource_give_response_to_user($response_obj, $request_method){
	global $user;
	
	if($response_obj != null){
		$num_updated = db_update('coap_resource_users')
		->fields(array(
			'responded' => 1,
			'last_method' => $request_method,
			'last_response' => $response_obj->get_payload_text(),
			'response_type' => $response_obj->get_message_code(),
		))
		->condition('uid', $user->uid, '=')
		->execute();
	}
	else{
		$num_updated = db_update('coap_resource_users')
		->fields(array(
			'responded' => 1,
			'last_method' => $request_method,
			'last_response' => 'no response returned',
		))
		->condition('uid', $user->uid, '=')
		->execute();
	}
}

//	Adds the given response to the database table with values for the given user
function coap_resource_insert_response_into_database($response_obj, $uid){
	//	Parsing values from response
	$max_age = $response_obj->get_max_age();
	$value = $response_obj->get_payload_text();
	$format = $response_obj->get_content_format();
	$content_type = $response_obj->get_message_code();
	if($format == 'text/plain'){
		$value = coap_resource_get_temperature($value);
	}
	$hid = db_insert('coap_resource_values')
		->fields(array(
			'payload' => $response_obj->get_payload(),
			'content_format' => $format,
			'original_response' => $response_obj->get_hex_message(),
			'parsed_value' => $value,
			'max_age' => $max_age,
			'uri' => ($response_obj->get_ip() . '/' . $response_obj->get_resource()),
			'uid' => $uid,
		))
		->execute();
}

//	Callback for AJAX call
//	Starts observe for the given URI
function coap_resource_handle_observing_for_uri($uri, $state){
	global $user;
	
	$uri = str_replace('|', '/', $uri); //	Put slashes back in the URI
	
	//	Get number of observers for the current URI
	$observe_result = db_select('coap_resource_users', 'users')
		->fields('users', array('uid', 'uri', 'observe'))
		->condition('uri', $uri, '=')
		->condition('device', 0, '=')
		->condition('observe', 1, '=')
		->execute();
	$num_observers = $observe_result->rowCount();
	
	//	Store in database that this user is observing or not observing the current URI
	$num_updated = db_update('coap_resource_users')
		->fields(array(
			'observe' => ($state == "start" ? 1 : 0),
		))
		->condition('uri', $uri, '=')
		->condition('uid', $user->uid, '=')
		->condition('device', 0, '=')
		->execute();
	
	//	Start observing the current URI if this user is interested and no one else was already observing
	if($state == "start" && $num_observers == 0){
		background_process_start('coap_resource_start_observing', $uri);
	}
	
	//	Get number of users that is still observing the current URI
	$observe_result = db_select('coap_resource_users', 'users')
		->fields('users', array('uid', 'uri', 'observe'))
		->condition('uri', $uri, '=')
		->condition('device', 0, '=')
		->condition('observe', 1, '=')
		->execute();
	
	//	Stop observing the URI if no one is interested anymore
	if($observe_result->rowCount() == 0){
		coap_library_stop_observing('coap_resource', $uri);
	}
	
	//	Return value for AJAX call
	echo "<uri>" . $uri . "</uri><response>success</response>";
}