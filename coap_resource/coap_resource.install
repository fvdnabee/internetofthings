<?php

function coap_resource_node_info() {
  return array(
    'coap_resource' => array(
      'name' => t('CoAP resource'),
      'base' => 'node_content',
	  'has_body' => FALSE,
      'description' => t('CoAP resource Form'),
    ),
  );
}

/**
 * Implements hook_schema().
 */
function coap_resource_schema() {
	
	// Tabel om resources bij te houden
	$schema['coap_resource_resources'] = array(
		'description' => "Tabel om resources en hun karakteristieken bij te houden",
		'fields' => array(
				'uri' => array(
					'type' => 'varchar',
					'not null' => TRUE,
					'length' => '128',
					'description' => 'Een URI van een resource',
				),
				'obs' => array(					
					'type' => 'int',
					'unsigned' => TRUE,
					'not null' => TRUE,
					'default' => 0,
					'description' => 'Waarde om te bepalen of het device observeerbaar is of niet --> 0 = niet observeerbaar, 1 = wel observeerbaar',
				),
				'rt' => array(
					'type' => 'varchar',
					'not null' => FALSE,
					'length' => '128',
					'description' => 'application-specific semantic type',
				),
				'ct' => array(
					'type' => 'varchar',
					'not null' => FALSE,
					'length' => '128',
					'description' => 'content-type',
				),
				'ifd' => array(
					'type' => 'varchar',
					'not null' => FALSE,
					'length' => '128',
					'description' => 'interface desciption',
				),
				'sz' => array(
					'type' => 'varchar',
					'not null' => FALSE,
					'length' => '128',
					'description' => 'maximum size',
				),
				'title' => array(
					'type' => 'varchar',
					'not null' => FALSE,
					'length' => '128',
					'description' => 'human-readable name of resource',
				),
				'anchor' => array(
					'type' => 'varchar',
					'not null' => FALSE,
					'length' => '128',
					'description' => 'anchoring into other resource',
				),
				'rel' => array(
					'type' => 'varchar',
					'not null' => FALSE,
					'length' => '128',
					'description' => 'relation between source entered in anchor',
				),
				'separate_response' => array(
					'type' => 'int',
					'not null' => FALSE,
					'unsigned' => TRUE,
					'default' => 0,
					'description' => 'Tells if the resource uses separate response or not, 0 = no, 1 = yes',
				),
				'last_error' => array(
					'description' => 'Laatst opgetreden fout',
					'type' => 'varchar',
					'not null' => TRUE,
					'default' => 'none',
					'length' => '128',
				),
			),
			'primary key' => array('uri'),
	);
	
	// Tabel om URI's per user bij te houden
	$schema['coap_resource_users'] = array(
		'description' => "Tabel om users bij te houden en de URI's die ze willen gebruiken",
		'fields' => array(
				'uid' => array(
					'type' => 'int',
					'unsigned' => TRUE,
					'not null' => TRUE,
					'description' => 'User ID',
				),
				'uri' => array(
					'type' => 'varchar',
					'not null' => TRUE,
					'length' => '128',
					'description' => 'Een URI van een embedded device',
				),
				'device' => array(
					'description' => 'Waarde om te bepalen of het om een resource of een device gaat --> 0 = resource, 1 = device',
					'type' => 'int',
					'unsigned' => TRUE,
					'not null' => TRUE,
					'default' => 0,
				),
				'observe' => array(
					'description' => 'Waarde om te bepalen of de gebruiker het device wil observeren of niet --> 0 = niet observeren, 1 = wel observeren',
					'type' => 'int',
					'unsigned' => TRUE,
					'not null' => TRUE,
					'default' => 0,
				),
				'watch' => array(
					'description' => 'Waarde om te bepalen of de gebruiker de waardes wil zien verschijnen of niet --> 0 = niet verschijnen, 1 = wel verschijnen',
					'type' => 'int',
					'unsigned' => TRUE,
					'not null' => TRUE,
					'default' => 0,
				),
				'polling_interval' => array(
					'description' => 'Waarde die het aantal seconden weergeeft tussen 2 opvragingen vanuit jQuery',
					'type' => 'int',
					'unsigned' => TRUE,
					'not null' => TRUE,
					'default' => 2,
				),
				'last_method' => array(
					'description' => 'Methode van laatste request --> {GET, PUT, POST, DELETE}',
					'type' => 'varchar',
					'not null' => FALSE,
					'length' => '64',
				),
				'last_response' => array(
					'description' => 'Laatst verkregen response',
					'type' => 'varchar',
					'not null' => FALSE,
					'length' => '2048',
				),
				'responded' => array(
					'description' => 'value indicating if server just responded',
					'type' => 'int',
					'unsigned' => TRUE,
					'not null' => TRUE,
					'default' => 0,
				),
				'response_type' => array(
					'description' => 'Response type of last received response',
					'type' => 'varchar',
					'not null' => FALSE,
					'length' => '2048',
				),
			),
			'primary key' => array('uid', 'uri'),
			'foreign keys' => array(
				'uri' => array(
					'table' => 'coap_resource_resources',
					'columns' => array('uri' => 'uri'),
				),
			),
	);

	// Tabel om opgevraagde waarden op te slaan
	$schema['coap_resource_values'] = array(
		'description' => 'Tabel om geschiedenis van opgevraagde waarden op te slaan',
		'fields' => array(
				'hid' => array(
					'type' => 'serial',
					'unsigned' => TRUE,
					'not null' => TRUE,
					'description' => 'Primary key, unique history entry ID',
				),
				'uid' => array(
					'type' => 'int',
					'unsigned' => TRUE,
					'not null' => TRUE,
					'description' => 'User ID',
				),
				'uri' => array(
					'type' => 'varchar',
					'not null' => TRUE,
					'length' => '128',
					'description' => 'Een URI van een embedded device',
				),
				'content_format'=> array(
					'type' => 'varchar',
					'not null' => FALSE,
					'length' => '256',
					'description' => 'Het content-format van de response',
				),
				'payload'=> array(
					'type' => 'varchar',
					'not null' => FALSE,
					'length' => '2048',
					'description' => 'De inhoud van de payload',
				),
				'parsed_value' => array(
					'description' => 'Opgevraagde waarde',
					'type' => 'varchar',
					'length' => '128',
					'description' => 'Value that has been parsed out of the payload of the response, is original response if no value could be parsed',
					'not null' => FALSE,
				),
				'max_age' => array(
					'description' => 'Geldigheidsperiode in seconden',
					'type' => 'int',
					'unsigned' => TRUE,
					'not null' => FALSE,
				),
				'timestamp' => array(
					'description' => 'Tijd van opvraging',
					'mysql_type' => 'timestamp',
					'not null' => TRUE,
				),
				'original_response' => array(
					'type' => 'varchar',
					'not null' => TRUE,
					'length' => '2048',
					'default' => 'empty',
					'description' => 'De originele response van de aanvraag',
				),
			),
			'primary key' => array('hid'),
			'foreign keys' => array(
				'uri' => array(
					'table' => 'coap_resource_resources',
					'columns' => array('uri' => 'uri'),
				),
				'uid' => array(
					'table' => 'coap_resource_users',
					'columns' => array('uid' => 'uid'),
				),
			),
	);

	return $schema;
}

function coap_resource_uninstall(){
	db_drop_table('coap_resource_resources');
	db_drop_table('coap_resource_users');
	db_drop_table('coap_resource_values');
}

function coap_resource_enable() {  
  variable_set('comment_coap_resource', 0);					//comments default disabled
  variable_set('node_options_coap_resource', array('status'));	//promote to front page default unchecked
  variable_set('node_preview_coap_resource', 0);				//preview default disabled
  variable_set('node_submitted_coap_resource', 0);
}

function coap_resource_disable(){
	$result = db_select('node','nodes')
				->fields('nodes', array('nid','type'))
				->condition('type', 'coap_resource', '=')
				->execute();
				
	$nids = array();
	foreach ($result as $row) {
		$nids[] = $row->nid;
	}
	// Delete all the nodes at once
	node_delete_multiple($nids);
	
	//delete any  variables made by module
	variable_del('comment_coap_resource');
	variable_del('node_preview_coap_resource');
	variable_del('node_submitted_coap_resource');
	variable_del('node_options_coap_resource');	
	
	$instance = array('field_name' => 'comment_body','bundle' => 'comment_node_coap_resource','entity_type' => 'comment');
	field_delete_instance($instance);
	
	$instance = array('field_name' => 'body','bundle' => 'coap_resource','entity_type' => 'node');
	field_delete_instance($instance);
	
	//deleting content type
	node_type_delete('coap_resource');
	node_types_rebuild();
	
	// Purge all field information
	field_purge_batch(1000);
}